Here's the complete set of model files for your database schema using ES6 imports/exports and Sequelize with Express.js:

### models/index.js
```javascript
import { Sequelize } from 'sequelize';
import config from '../config/config.js';

const env = process.env.NODE_ENV || 'development';
const dbConfig = config[env];

const sequelize = new Sequelize(
  dbConfig.database,
  dbConfig.username,
  dbConfig.password,
  {
    host: dbConfig.host,
    dialect: dbConfig.dialect,
    logging: false,
  }
);

const db = {};

db.Sequelize = Sequelize;
db.sequelize = sequelize;

// Import models
db.User = await import('./userModel.js').then(m => m.default(sequelize, Sequelize));
db.Category = await import('./categoryModel.js').then(m => m.default(sequelize, Sequelize));
db.Product = await import('./productModel.js').then(m => m.default(sequelize, Sequelize));
db.Coupon = await import('./couponModel.js').then(m => m.default(sequelize, Sequelize));
db.CouponUser = await import('./couponUserModel.js').then(m => m.default(sequelize, Sequelize));
db.Order = await import('./orderModel.js').then(m => m.default(sequelize, Sequelize));
db.OrderItem = await import('./orderItemModel.js').then(m => m.default(sequelize, Sequelize));
db.Cart = await import('./cartModel.js').then(m => m.default(sequelize, Sequelize));
db.Wishlist = await import('./wishlistModel.js').then(m => m.default(sequelize, Sequelize));
db.Review = await import('./reviewModel.js').then(m => m.default(sequelize, Sequelize));
db.StockAlert = await import('./stockAlertModel.js').then(m => m.default(sequelize, Sequelize));

// Define relationships
Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

export default db;
```

### models/userModel.js
```javascript
export default (sequelize, DataTypes) => {
  const User = sequelize.define('User', {
    user_id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false
    },
    email: {
      type: DataTypes.STRING,
      unique: true,
      allowNull: false,
      validate: {
        isEmail: true
      }
    },
    phone_number: {
      type: DataTypes.STRING,
      unique: true
    },
    password: {
      type: DataTypes.STRING,
      allowNull: false
    },
    address: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    role: {
      type: DataTypes.ENUM('customer', 'retailer', 'admin'),
      allowNull: false
    },
    created_at: {
      type: DataTypes.DATE,
      defaultValue: DataTypes.NOW
    }
  }, {
    timestamps: false,
    tableName: 'Users'
  });

  User.associate = (models) => {
    User.hasMany(models.Product, { foreignKey: 'created_by' });
    User.hasMany(models.Category, { foreignKey: 'created_by' });
    User.hasMany(models.Coupon, { foreignKey: 'created_by' });
    User.hasMany(models.Order, { foreignKey: 'user_id' });
    User.hasMany(models.Cart, { foreignKey: 'user_id' });
    User.hasMany(models.Wishlist, { foreignKey: 'user_id' });
    User.hasMany(models.Review, { foreignKey: 'user_id' });
    User.belongsToMany(models.Coupon, { through: models.CouponUser, foreignKey: 'user_id' });
  };

  return User;
};
```

### models/categoryModel.js
```javascript
export default (sequelize, DataTypes) => {
  const Category = sequelize.define('Category', {
    category_id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false
    },
    target_role: {
      type: DataTypes.ENUM('customer', 'retailer'),
      allowNull: false
    },
    created_at: {
      type: DataTypes.DATE,
      defaultValue: DataTypes.NOW
    }
  }, {
    timestamps: false,
    tableName: 'Categories'
  });

  Category.associate = (models) => {
    Category.belongsTo(models.User, { foreignKey: 'created_by' });
    Category.hasMany(models.Product, { foreignKey: 'category_id' });
  };

  return Category;
};
```

### models/productModel.js
```javascript
export default (sequelize, DataTypes) => {
  const Product = sequelize.define('Product', {
    product_id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false
    },
    price: {
      type: DataTypes.DECIMAL(10, 2),
      allowNull: false
    },
    stock: {
      type: DataTypes.INTEGER,
      allowNull: false,
      defaultValue: 0
    },
    description: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    image_url: {
      type: DataTypes.STRING,
      allowNull: true
    },
    discount_quantity: {
      type: DataTypes.INTEGER,
      allowNull: true
    },
    discount_percentage: {
      type: DataTypes.DECIMAL(5, 2),
      allowNull: true
    },
    min_retailer_quantity: {
      type: DataTypes.INTEGER,
      allowNull: true
    },
    bulk_discount_quantity: {
      type: DataTypes.INTEGER,
      allowNull: true
    },
    bulk_discount_percentage: {
      type: DataTypes.DECIMAL(5, 2),
      allowNull: true
    },
    stock_alert_threshold: {
      type: DataTypes.INTEGER,
      allowNull: false,
      defaultValue: 5
    },
    target_role: {
      type: DataTypes.ENUM('customer', 'retailer'),
      allowNull: false
    }
  }, {
    timestamps: false,
    tableName: 'Products'
  });

  Product.associate = (models) => {
    Product.belongsTo(models.Category, { foreignKey: 'category_id' });
    Product.belongsTo(models.User, { foreignKey: 'created_by' });
    Product.hasMany(models.Coupon, { foreignKey: 'product_id' });
    Product.hasMany(models.OrderItem, { foreignKey: 'product_id' });
    Product.hasMany(models.Cart, { foreignKey: 'product_id' });
    Product.hasMany(models.Wishlist, { foreignKey: 'product_id' });
    Product.hasMany(models.Review, { foreignKey: 'product_id' });
    Product.hasMany(models.StockAlert, { foreignKey: 'product_id' });
  };

  return Product;
};
```

### models/couponModel.js
```javascript
export default (sequelize, DataTypes) => {
  const Coupon = sequelize.define('Coupon', {
    coupon_id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    code: {
      type: DataTypes.STRING,
      unique: true,
      allowNull: false
    },
    discount_percentage: {
      type: DataTypes.DECIMAL(5, 2),
      allowNull: false
    },
    valid_from: {
      type: DataTypes.DATE,
      allowNull: false
    },
    valid_until: {
      type: DataTypes.DATE,
      allowNull: false
    },
    target_role: {
      type: DataTypes.ENUM('customer', 'retailer', 'both'),
      allowNull: false
    },
    is_user_specific: {
      type: DataTypes.BOOLEAN,
      defaultValue: false
    }
  }, {
    timestamps: false,
    tableName: 'Coupons'
  });

  Coupon.associate = (models) => {
    Coupon.belongsTo(models.Product, { foreignKey: 'product_id' });
    Coupon.belongsTo(models.User, { foreignKey: 'created_by' });
    Coupon.belongsToMany(models.User, { through: models.CouponUser, foreignKey: 'coupon_id' });
    Coupon.hasMany(models.Order, { foreignKey: 'coupon_id' });
  };

  return Coupon;
};
```

### models/couponUserModel.js
```javascript
export default (sequelize, DataTypes) => {
  const CouponUser = sequelize.define('CouponUser', {
    coupon_user_id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    }
  }, {
    timestamps: false,
    tableName: 'Coupon_Users'
  });

  CouponUser.associate = (models) => {
    CouponUser.belongsTo(models.Coupon, { foreignKey: 'coupon_id' });
    CouponUser.belongsTo(models.User, { foreignKey: 'user_id' });
  };

  return CouponUser;
};
```

### models/orderModel.js
```javascript
export default (sequelize, DataTypes) => {
  const Order = sequelize.define('Order', {
    order_id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    total_amount: {
      type: DataTypes.DECIMAL(10, 2),
      allowNull: false
    },
    status: {
      type: DataTypes.ENUM('pending', 'shipped', 'delivered', 'cancelled', 'cancel_requested'),
      defaultValue: 'pending'
    },
    address: {
      type: DataTypes.TEXT,
      allowNull: false
    },
    mobile_number: {
      type: DataTypes.STRING,
      allowNull: false
    },
    created_at: {
      type: DataTypes.DATE,
      defaultValue: DataTypes.NOW
    }
  }, {
    timestamps: false,
    tableName: 'Orders'
  });

  Order.associate = (models) => {
    Order.belongsTo(models.User, { foreignKey: 'user_id' });
    Order.belongsTo(models.Coupon, { foreignKey: 'coupon_id' });
    Order.hasMany(models.OrderItem, { foreignKey: 'order_id' });
  };

  return Order;
};
```

### models/orderItemModel.js
```javascript
export default (sequelize, DataTypes) => {
  const OrderItem = sequelize.define('OrderItem', {
    order_item_id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    quantity: {
      type: DataTypes.INTEGER,
      allowNull: false
    },
    price_at_time: {
      type: DataTypes.DECIMAL(10, 2),
      allowNull: false
    },
    discount_applied: {
      type: DataTypes.DECIMAL(5, 2),
      allowNull: true
    }
  }, {
    timestamps: false,
    tableName: 'Order_Items'
  });

  OrderItem.associate = (models) => {
    OrderItem.belongsTo(models.Order, { foreignKey: 'order_id' });
    OrderItem.belongsTo(models.Product, { foreignKey: 'product_id' });
  };

  return OrderItem;
};
```

### models/cartModel.js
```javascript
export default (sequelize, DataTypes) => {
  const Cart = sequelize.define('Cart', {
    cart_id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    quantity: {
      type: DataTypes.INTEGER,
      allowNull: false,
      defaultValue: 1
    }
  }, {
    timestamps: false,
    tableName: 'Cart'
  });

  Cart.associate = (models) => {
    Cart.belongsTo(models.User, { foreignKey: 'user_id' });
    Cart.belongsTo(models.Product, { foreignKey: 'product_id' });
  };

  return Cart;
};
```

### models/wishlistModel.js
```javascript
export default (sequelize, DataTypes) => {
  const Wishlist = sequelize.define('Wishlist', {
    wishlist_id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    created_at: {
      type: DataTypes.DATE,
      defaultValue: DataTypes.NOW
    }
  }, {
    timestamps: false,
    tableName: 'Wishlist'
  });

  Wishlist.associate = (models) => {
    Wishlist.belongsTo(models.User, { foreignKey: 'user_id' });
    Wishlist.belongsTo(models.Product, { foreignKey: 'product_id' });
  };

  return Wishlist;
};
```

### models/reviewModel.js
```javascript
export default (sequelize, DataTypes) => {
  const Review = sequelize.define('Review', {
    review_id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    rating: {
      type: DataTypes.INTEGER,
      allowNull: false,
      validate: {
        min: 1,
        max: 5
      }
    },
    comment: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    created_at: {
      type: DataTypes.DATE,
      defaultValue: DataTypes.NOW
    }
  }, {
    timestamps: false,
    tableName: 'Reviews'
  });

  Review.associate = (models) => {
    Review.belongsTo(models.Product, { foreignKey: 'product_id' });
    Review.belongsTo(models.User, { foreignKey: 'user_id' });
  };

  return Review;
};
```

### models/stockAlertModel.js
```javascript
export default (sequelize, DataTypes) => {
  const StockAlert = sequelize.define('StockAlert', {
    alert_id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    stock_level: {
      type: DataTypes.INTEGER,
      allowNull: false
    },
    status: {
      type: DataTypes.ENUM('pending', 'sent'),
      defaultValue: 'pending'
    },
    created_at: {
      type: DataTypes.DATE,
      defaultValue: DataTypes.NOW
    }
  }, {
    timestamps: false,
    tableName: 'Stock_Alerts'
  });

  StockAlert.associate = (models) => {
    StockAlert.belongsTo(models.Product, { foreignKey: 'product_id' });
  };

  return StockAlert;
};
```

These model files follow Sequelize conventions and include all the fields from your database schema. Each model includes its associations with other models, and the `index.js` file sets up all the relationships between models. The models use ES6 module syntax for imports/exports as requested.