### Electronics E-Commerce Project - Development Flow (Complete & Final)
Ye development flow Electronics E-Commerce Project ke liye hai, jo 26 Sequelize models aur service documentation ke saath fully aligned hai. `CartItems` table ab explicitly include kiya gaya hai, aur `Carts` aur `CartItems` ke roles clearly differentiate kiye gaye hain. Har phase step-by-step diya gaya hai taaki development systematic aur smooth ho. Har phase mein APIs, related models, dependencies, validations, aur testing steps include hain. Flow aisa banaya gaya hai ki backend scalable rahe aur testing ke liye ready ho. ProductMediaURL, VariantAttributeValues, CouponUsers, aur baki sabhi models properly covered hain.

---

### Phase 1: Project Setup
**Objective**: Basic project structure aur environment setup karna.  
**Models Involved**: None  
**APIs**:
- GET /api/health (Health check to verify server status)

**Steps**:
1. **Tech Stack Setup**:
   - Node.js aur Express.js ka latest version install karo.
   - Sequelize ORM configure karo with PostgreSQL/MySQL.
   - .env file mein environment variables set karo (DATABASE_URL, JWT_SECRET, PORT, etc.).
2. **Project Structure**:
   - Folders banaye: `/controllers`, `/models`, `/routes`, `/middleware`, `/services`, `/utils`.
   - Basic error handling middleware add karo (e.g., 404, 500 responses).
3. **Health Check API**:
   - GET /api/health implement karo jo `{ "status": "OK", "timestamp": "2025-05-07" }` return kare.
4. **Dependencies**:
   - Install packages: `express`, `sequelize`, `jsonwebtoken`, `bcrypt`, `dotenv`, `express-validator`.
5. **Testing**:
   - Localhost pe server run karo (e.g., `npm start`).
   - Postman ya cURL se /api/health test karo.

**Validation**:
- Server start hota hai aur GET /api/health 200 OK response deta hai.
- .env file ke variables properly load ho rahe hain.

---

### Phase 2: Authentication & User Management
**Objective**: User registration, login, profile, aur address management ke features develop karna.  
**Models Involved**: Users, Addresses  
**Dependencies**: Phase 1 complete (server setup)  
**APIs**:
- POST /api/auth/register (User Registration)
- POST /api/auth/login (User Login)
- POST /api/auth/forgot-password (Forgot Password - Optional)
- POST /api/auth/reset-password (Reset Password - Optional)
- GET /api/users/me (Get Profile)
- PUT /api/users/me (Update Profile)
- POST /api/users/addresses (Add Address)
- GET /api/users/addresses (List Addresses)
- PUT /api/users/addresses/:addressId (Update Address)
- DELETE /api/users/addresses/:addressId (Soft Delete Address)
- PUT /api/users/default-address/:addressId (Set Default Address)

**Steps**:
1. **Database Setup**:
   - Sequelize migrations use karke `Users` aur `Addresses` tables create karo.
   - **Users**: `user_id` (UUID), `name`, `email` (unique), `phone_number` (unique), `password` (hashed), `role` (enum: customer, retailer, admin), `status` (enum: active, inactive, banned), `current_address_id` (FK → Addresses), `created_at`, `updated_at`.
   - **Addresses**: `id` (UUID), `user_id` (FK → Users), `address_line1`, `address_line2`, `city`, `state`, `postal_code`, `country`, `is_default`, `is_active`, `created_at`, `updated_at`, `deleted_at` (paranoid enabled).
2. **Authentication**:
   - JWT middleware banaye for role-based access (use `jsonwebtoken`).
   - `bcrypt` se password hashing implement karo.
   - POST /api/auth/register: User create karo, email aur phone_number ke unique checks karo, password hash karo.
   - POST /api/auth/login: Email/password verify karo, JWT token generate karo (payload: `user_id`, `role`).
   - Optional: Forgot-password aur reset-password ke liye email service (e.g., Nodemailer) integrate karo.
3. **Profile Management**:
   - GET /api/users/me: JWT se `user_id` fetch karo, user details return karo (exclude password).
   - PUT /api/users/me: Name, email, phone_number update karo with unique checks.
4. **Address Management**:
   - POST /api/users/addresses: Naya address add karo, agar `is_default` true hai to `Users.current_address_id` update karo.
   - GET /api/users/addresses: User ke `is_active` = true addresses fetch karo.
   - PUT /api/users/addresses/:addressId: Address update karo, `is_default` handle karo.
   - DELETE /api/users/addresses/:addressId: `is_active` = false karo (soft delete).
   - PUT /api/users/default-address/:addressId: `Users.current_address_id` aur `Addresses.is_default` update karo.
5. **Testing**:
   - Unit tests for registration, login, profile update (use Jest/Mocha).
   - Integration tests for address CRUD operations.
   - JWT validation test karo (invalid/expired token cases).

**Validation**:
- User successfully register aur login kar pa raha hai.
- Addresses add, update, delete, aur default set ho rahe hain.
- Role-based access (customer, retailer, admin) kaam kar raha hai.
- Email/phone_number unique constraints enforce ho rahe hain.

---

### Phase 3: Product Catalog Setup
**Objective**: Product catalog ke liye categories, brands, attributes, products, variants, aur media setup karna.  
**Models Involved**: Categories, Brands, Attributes, AttributeValues, VariantAttributeValues, Products, ProductVariants, ProductMedia, ProductMediaURL  
**Dependencies**: Phase 2 complete (user authentication, admin role)  
**APIs**:
- **Categories**:
  - POST /api/admin/categories (Create Category)
  - GET /api/admin/categories (List Categories for Admin)
  - GET /api/categories (Public List Categories)
  - PUT /api/admin/categories/:categoryId (Update Category)
  - DELETE /api/admin/categories/:categoryId (Soft Delete Category)
- **Brands**:
  - POST /api/admin/brands (Create Brand)
  - GET /api/admin/brands (List Brands for Admin)
  - GET /api/brands (Public List Brands)
  - PUT /api/admin/brands/:brandId (Update Brand)
  - DELETE /api/admin/brands/:brandId (Soft Delete Brand)
- **Attributes**:
  - POST /api/admin/attributes (Create Attribute)
  - GET /api/admin/attributes (List Attributes)
  - PUT /api/admin/attributes/:attributeId (Update Attribute)
  - DELETE /api/admin/attributes/:attributeId (Delete Attribute)
- **Attribute Values**:
  - POST /api/admin/attributes/:attributeId/values (Create Attribute Value)
  - GET /api/admin/attributes/:attributeId/values (List Attribute Values)
  - PUT /api/admin/attributes/:attributeId/values/:valueId (Update Attribute Value)
  - DELETE /api/admin/attributes/:attributeId/values/:valueId (Delete Attribute Value)
- **Variant Attribute Values**:
  - POST /api/admin/variants/:variantId/attributes (Assign Attribute to Variant)
  - GET /api/admin/variants/:variantId/attributes (List Variant Attributes)
  - DELETE /api/admin/variants/:variantId/attributes/:attributeValueId (Remove Variant Attribute)
- **Products**:
  - POST /api/admin/products (Create Product)
  - GET /api/admin/products (List Products for Admin)
  - GET /api/products (Public List Products)
  - GET /api/products/:productId (Product Details)
  - PUT /api/admin/products/:productId (Update Product)
  - DELETE /api/admin/products/:productId (Soft Delete Product)
  - GET /api/products/search (Search & Filter Products)
- **Product Variants**:
  - POST /api/admin/products/:productId/variants (Create Variant)
  - GET /api/admin/variants (List Variants for Admin)
  - GET /api/products/:productId/variants (Public List Variants)
  - PUT /api/admin/variants/:variantId (Update Variant)
  - DELETE /api/admin/variants/:variantId (Delete Variant)
  - PUT /api/admin/variants/:variantId/stock (Update Stock)
- **Product Media**:
  - POST /api/admin/products/:productId/media (Add Media)
  - GET /api/products/:productId/media (Get Media)
  - PUT /api/admin/media/:mediaId (Update Media)
  - DELETE /api/admin/media/:mediaId (Delete Media)
- **Product Media URLs**:
  - POST /api/admin/products/:productId/media/:mediaId/urls (Add Media URL)
  - GET /api/products/:productId/media/:mediaId/urls (List Media URLs)
  - PUT /api/admin/media/:mediaId/urls/:urlId (Update Media URL)
  - DELETE /api/admin/media/:mediaId/urls/:urlId (Delete Media URL)

**Steps**:
1. **Database Setup**:
   - Sequelize migrations use karke tables create karo: `Categories`, `Brands`, `Attributes`, `AttributeValues`, `VariantAttributeValues`, `Products`, `ProductVariants`, `ProductMedia`, `ProductMediaURL`.
   - Foreign keys ensure karo:
     - `Products`: `category_id` (FK → Categories), `brand_id` (FK → Brands).
     - `ProductVariants`: `product_id` (FK → Products).
     - `ProductMedia`: `product_id` (FK → Products), `product_variant_id` (FK → ProductVariants, optional).
     - `ProductMediaURL`: `product_media_id` (FK → ProductMedia).
     - `VariantAttributeValues`: `product_variant_id` (FK → ProductVariants), `product_attribute_id` (FK → Attributes), `product_attribute_value_id` (FK → AttributeValues).
2. **Category Management**:
   - POST /api/admin/categories: Category create karo, `slug` unique rakho, `target_role` (customer, retailer, both) set karo.
   - GET /api/categories: Tree structure mein categories return karo (use recursive query for sub-categories).
   - PUT/DELETE: Admin-only updates aur soft deletes (`is_active` = false).
3. **Brand Management**:
   - POST /api/admin/brands: Brand create karo, `slug` unique rakho.
   - GET /api/brands: Public aur admin ke liye brands list karo.
   - PUT/DELETE: Admin-only updates aur soft deletes.
4. **Attribute Management**:
   - POST /api/admin/attributes: Attributes create karo (e.g., Color, Storage), `data_type` (string, int, float, enum) set karo.
   - POST /api/admin/attributes/:attributeId/values: Attribute values add karo (e.g., Black, 128GB).
   - POST /api/admin/variants/:variantId/attributes: Variant ke liye attribute mappings save karo in `VariantAttributeValues`.
   - CRUD operations for attributes aur values.
5. **Product Management**:
   - POST /api/admin/products: Product create karo with `category_id`, `brand_id`, `base_price`, `slug` (unique).
   - GET /api/products: Role-based product listing (filter by `Categories.target_role`).
   - GET /api/products/search: Search aur filter implement karo (name, category, price range, brand).
6. **Variant Management**:
   - POST /api/admin/products/:productId/variants: Variants create karo with `price`, `sku` (unique), `stock_quantity`, aur attributes.
   - PUT /api/admin/variants/:variantId/stock: Stock update karo, low stock pe `StockAlerts` trigger karo.
   - CRUD operations for variants.
7. **Media Management**:
   - POST /api/admin/products/:productId/media: Media upload karo (use cloud storage like AWS S3).
   - POST /api/admin/products/:productId/media/:mediaId/urls: Media URLs save karo in `ProductMediaURL`.
   - CRUD operations for media aur URLs.
8. **Testing**:
   - Unit tests for category, brand, product, variant, media, aur URL creation (use Jest).
   - Integration tests for product search, filtering, aur media management.
   - Admin-only access test karo (JWT role validation).
   - Test attribute mappings (`VariantAttributeValues`) for variants.

**Validation**:
- Categories, brands, products, variants, media, aur URLs create/update/delete ho rahe hain.
- Variant attributes (`VariantAttributeValues`) properly map ho rahe hain.
- Search aur filter APIs sahi results de rahe hain.
- `target_role` based filtering kaam kar raha hai.

---

### Phase 4: Cart & Wishlist Management
**Objective**: Cart aur wishlist ke features develop karna.  
**Models Involved**: Carts, CartItems, Wishlists, WishListItems, Products, ProductVariants  
**Dependencies**: Phase 2 (user authentication), Phase 3 (products)  
**APIs**:
- **Cart**:
  - POST /api/cart/items (Add to Cart)
  - GET /api/cart (Get Cart)
  - PUT /api/cart/items/:cartItemId (Update Quantity)
  - DELETE /api/cart/items/:cartItemId (Remove from Cart)
- **Wishlist**:
  - POST /api/wishlist/items (Add to Wishlist)
  - GET /api/wishlist (Get Wishlist)
  - DELETE /api/wishlist/items/:wishListItemId (Remove from Wishlist)

**Steps**:
1. **Database Setup**:
   - Tables create karo: `Carts`, `CartItems`, `Wishlists`, `WishListItems`.
   - **Carts**: `cart_id` (UUID), `user_id` (FK → Users), `created_at`, `updated_at`.
   - **CartItems**: `cart_item_id` (UUID), `cart_id` (FK → Carts), `product_id` (FK → Products), `product_variant_id` (FK → ProductVariants), `quantity`, `price_at_time`, `discount_applied`, `final_price`, `created_at`, `updated_at`.
   - **Wishlists**: `wishlist_id` (UUID), `user_id` (FK → Users), `created_at`, `updated_at`.
   - **WishListItems**: `wish_list_item_id` (UUID), `wishlist_id` (FK → Wishlists), `product_id` (FK → Products), `product_variant_id` (FK → ProductVariants), `created_at`, `updated_at`.
2. **Cart Management**:
   - POST /api/cart/items: Product variant ko `CartItems` mein add karo, `ProductVariants.stock_quantity` check karo, `price_at_time` save karo from `ProductVariants.price`.
   - GET /api/cart: `Carts` aur `CartItems` fetch karo, real-time prices (`ProductVariants`) ke saath compare karo.
   - PUT /api/cart/items/:cartItemId: `quantity` update karo, stock validate karo, `final_price` recalculate karo.
   - DELETE /api/cart/items/:cartItemId: `CartItems` record remove karo.
3. **Wishlist Management**:
   - POST /api/wishlist/items: Product/variant ko `WishListItems` mein add karo.
   - GET /api/wishlist: `Wishlists` aur `WishListItems` fetch karo with product details.
   - DELETE /api/wishlist/items/:wishListItemId: `WishListItems` record remove karo.
4. **Testing**:
   - Unit tests for cart/wishlist CRUD operations.
   - Integration tests for stock validation, price calculation, aur discount handling.
   - Test edge cases (e.g., add item with zero stock, update quantity beyond stock).

**Validation**:
- `CartItems` mein items add, update, aur remove ho rahe hain.
- `Carts` table user ke cart ko track kar raha hai.
- Wishlist mein products save aur remove ho rahe hain.
- Stock validation aur price calculations sahi kaam kar rahe hain.

---

### Phase 5: Order & Payment Management
**Objective**: Order placement, payment integration, aur order tracking develop karna.  
**Models Involved**: Orders, OrderItems, Payments, ProductVariants, Addresses, Coupons, CouponRedemptions, CartItems, Carts  
**Dependencies**: Phase 2 (users, addresses), Phase 3 (products), Phase 4 (cart)  
**APIs**:
- **Orders**:
  - POST /api/orders (Place Order)
  - GET /api/orders (List User Orders)
  - GET /api/orders/:orderId (Order Details)
  - PUT /api/orders/:orderId/cancel (Cancel Order by User)
- **Admin Orders**:
  - GET /api/admin/orders (List All Orders)
  - GET /api/admin/orders/:orderId (Order Details)
  - PUT /api/admin/orders/:orderId/status (Update Order Status)
- **Payments**:
  - POST /api/payments/create-order (Create Payment Order)
  - POST /api/payments/verify (Verify Payment)

**Steps**:
1. **Database Setup**:
   - Tables create karo: `Orders`, `OrderItems`, `Payments`.
   - **Orders**: `order_id` (UUID), `user_id` (FK → Users), `address_id` (FK → Addresses), `payment_id` (FK → Payments), `payment_method` (enum: credit_card, debit_card, upi, cod, net_banking), `order_status` (enum: pending, processing, shipped, delivered, cancelled), `payment_status` (enum: pending, paid, failed, refunded), `subtotal`, `shipping_cost`, `tax_amount`, `discount_amount`, `total_amount`, `order_number`, `order_date`, `created_at`, `updated_at`.
   - **OrderItems**: `order_item_id` (UUID), `order_id` (FK → Orders), `product_id` (FK → Products), `product_variant_id` (FK → ProductVariants), `total_quantity`, `price_at_time`, `discount_applied`, `final_price`, `created_at`, `updated_at`.
   - **Payments**: `payment_id` (UUID), `user_id` (FK → Users), `amount`, `currency`, `payment_status` (enum), `payment_method` (enum), `transaction_id`, `payment_date`, `created_at`, `updated_at`.
2. **Order Management**:
   - POST /api/orders: `CartItems` se order create karo, `ProductVariants.stock_quantity` update karo, `Carts` aur `CartItems` clear karo.
   - GET /api/orders: User ke orders list karo with pagination.
   - GET /api/orders/:orderId: Order details fetch karo (include `OrderItems`, `Addresses`, `Payments`).
   - PUT /api/orders/:orderId/cancel: Order cancel karo, stock vapis add karo (`ProductVariants`), payment refund initiate karo (if applicable).
3. **Admin Order Management**:
   - GET /api/admin/orders: All orders fetch karo with filters (status, date).
   - PUT /api/admin/orders/:orderId/status: `order_status` update karo (e.g., shipped, delivered).
4. **Payment Integration**:
   - POST /api/payments/create-order: Razorpay/Stripe integrate karo, payment link generate karo.
   - POST /api/payments/verify: Payment verify karo, `Payments.payment_status` aur `Orders.payment_status` update karo.
5. **Testing**:
   - Unit tests for order placement aur cancellation.
   - Integration tests for payment flow (create → verify).
   - Test admin order status updates.
   - Test stock updates aur refund scenarios.

**Validation**:
- Orders successfully place ho rahe hain from `CartItems`.
- Payments create aur verify ho rahe hain.
- Stock updates aur order cancellations sahi kaam kar rahe hain.
- Admin order status changes reflect ho rahe hain.

---

### Phase 6: Coupons & Discounts
**Objective**: Coupons aur discount rules ke features develop karna.  
**Models Involved**: Coupons, CouponUsers, CouponRedemptions, DiscountRules, CartItems  
**Dependencies**: Phase 5 (orders)  
**APIs**:
- **Coupons**:
  - POST /api/admin/coupons (Create Coupon)
  - GET /api/admin/coupons (List Coupons)
  - PUT /api/admin/coupons/:couponId (Update Coupon)
  - DELETE /api/admin/coupons/:couponId (Soft Delete Coupon)
- **Coupon Users**:
  - POST /api/admin/coupons/:couponId/users (Assign Coupon to User)
  - GET /api/admin/coupons/:couponId/users (List Coupon Users)
  - DELETE /api/admin/coupons/:couponId/users/:userId (Remove Coupon from User)
- **Coupon Redemptions**:
  - GET /api/admin/coupon-redemptions (List Coupon Redemptions - Admin)
- **Discount Rules**:
  - POST /api/admin/discount-rules (Create Discount Rule)
  - GET /api/admin/discount-rules (List Discount Rules)
  - PUT /api/admin/discount-rules/:ruleId (Update Discount Rule)
  - DELETE /api/admin/discount-rules/:ruleId (Soft Delete Discount Rule)
- **User-Facing**:
  - POST /api/orders/apply-coupon (Apply Coupon to Order)

**Steps**:
1. **Database Setup**:
   - Tables create karo: `Coupons`, `CouponUsers`, `CouponRedemptions`, `DiscountRules`.
   - **Coupons**: `id` (UUID), `code` (unique), `description`, `type` (enum: percentage, fixed), `discount_value`, `min_cart_value`, `usage_limit`, `valid_from`, `valid_to`, `target_role` (enum: customer, retailer, both), `target_type` (enum: product, cart), `is_active`, `created_by`, `created_at`, `updated_at`.
   - **CouponUsers**: `id` (UUID), `coupon_id` (FK → Coupons), `user_id` (FK → Users), `created_at`, `updated_at`.
   - **CouponRedemptions**: `id` (UUID), `user_id` (FK → Users), `coupon_id` (FK → Coupons), `order_id` (FK → Orders), `redeemed_at`, `discount_amount`, `created_at`, `updated_at`.
   - **DiscountRules**: `id` (UUID), `rule_type` (enum: bulk, percentage, quantity, retailer), `discount_value`, `product_id` (FK → Products, optional), `category_id` (FK → Categories, optional), `brand_id` (FK → Brands, optional), `product_variant_id` (FK → ProductVariants, optional), `min_cart_value`, `is_active`, `valid_from`, `valid_to`, `created_by`, `created_at`, `updated_at`.
2. **Coupon Management**:
   - POST /api/admin/coupons: Coupon create karo, `code` unique rakho, `target_role` aur `target_type` validate karo.
   - GET /api/admin/coupons: Coupons list karo with usage stats from `CouponRedemptions`.
   - PUT/DELETE: Coupon update aur soft delete (`is_active` = false).
3. **Coupon User Restrictions**:
   - POST /api/admin/coupons/:couponId/users: Specific users ko coupon assign karo (`CouponUsers`).
   - GET/DELETE: Assigned users list aur remove karo.
4. **Coupon Redemptions**:
   - GET /api/admin/coupon-redemptions: Admin ke liye redemption history fetch karo.
5. **Discount Rules**:
   - POST /api/admin/discount-rules: Discount rules create karo (e.g., 10% off on category).
   - CRUD operations for discount rules, ensure valid targets (`product_id`, `category_id`, etc.).
6. **Apply Coupon**:
   - POST /api/orders/apply-coupon: Coupon validate karo (`is_active`, `valid_from`, `valid_to`, `usage_limit`, `target_role`), `CartItems.discount_applied` aur `Orders.discount_amount`, `total_amount` update karo, `CouponRedemptions` record create karo.
7. **Testing**:
   - Unit tests for coupon creation, redemption, aur application.
   - Integration tests for discount rule application aur coupon user restrictions.
   - Test edge cases (e.g., expired coupon, usage limit exceeded).

**Validation**:
- Coupons create, apply, aur redeem ho rahe hain.
- Discount rules `CartItems` aur orders pe apply ho rahe hain.
- Coupon user restrictions (`CouponUsers`) aur redemption history kaam kar rahe hain.

---

### Phase 7: Reviews & Ratings
**Objective**: Product reviews aur ratings ke features develop karna.  
**Models Involved**: ProductReviews, Products  
**Dependencies**: Phase 3 (products), Phase 5 (orders)  
**APIs**:
- POST /api/products/:productId/reviews (Add Review)
- GET /api/products/:productId/reviews (Get Reviews)
- PUT /api/reviews/:reviewId (Update Review - User Only)
- DELETE /api/reviews/:reviewId (Delete Review - User Only)
- **Admin APIs**:
  - GET /api/admin/reviews (List All Reviews)
  - DELETE /api/admin/reviews/:reviewId (Delete Review - Admin)

**Steps**:
1. **Database Setup**:
   - `ProductReviews` table create karo: `product_review_id` (UUID), `user_id` (FK → Users), `product_id` (FK → Products), `product_variant_id` (FK → ProductVariants, optional), `rating` (1-5), `title`, `review`, `is_verified_purchase`, `created_at`, `updated_at`.
   - `Products` table mein `rating_average` (float), `rating_count` (int) fields add karo.
2. **Review Management**:
   - POST /api/products/:productId/reviews: Review add karo, `is_verified_purchase` check karo (user ne product order kiya hai ya nahi via `Orders`).
   - GET /api/products/:productId/reviews: Reviews list karo with user details (`Users` join).
   - PUT/DELETE: User apne reviews edit/delete kar sake (JWT-based ownership check).
   - Update `Products.rating_average` aur `rating_count` on review add/update/delete.
3. **Admin Review Management**:
   - GET /api/admin/reviews: All reviews fetch karo with filters (product, rating).
   - DELETE /api/admin/reviews/:reviewId: Admin inappropriate reviews delete kar sake.
4. **Testing**:
   - Unit tests for review CRUD operations.
   - Integration tests for verified purchase check aur rating aggregation.
   - Test admin review deletion.

**Validation**:
- Reviews add, update, delete ho rahe hain.
- `rating_average` aur `rating_count` correctly update ho rahe hain.
- `is_verified_purchase` check kaam kar raha hai.
- Admin reviews manage kar sakta hai.

---

### Phase 8: Admin Services
**Objective**: Admin-specific features jaise user management, analytics, aur stock alerts develop karna.  
**Models Involved**: Users, Orders, OrderItems, StockAlerts, ProductVariants  
**Dependencies**: Phase 2 (users), Phase 5 (orders)  
**APIs**:
- **User Management**:
  - GET /api/admin/users (List Users)
  - PUT /api/admin/users/:userId/status (Update User Status)
- **Sales Analytics**:
  - GET /api/admin/analytics (Get Sales Analytics)
- **Stock Alerts**:
  - GET /api/admin/stock-alerts (List Stock Alerts)
  - PUT /api/admin/stock-alerts/:alertId (Resolve Alert)

**Steps**:
1. **Database Setup**:
   - `StockAlerts` table create karo: `alert_id` (UUID), `product_id` (FK → Products), `product_variant_id` (FK → ProductVariants), `stock_level`, `status` (enum: pending, sent), `created_at`, `updated_at`.
2. **User Management**:
   - GET /api/admin/users: All users list karo with `role`, `status`, aur pagination.
   - PUT /api/admin/users/:userId/status: User `status` update karo (e.g., active, banned).
3. **Sales Analytics**:
   - GET /api/admin/analytics: `Orders` aur `OrderItems` se calculate karo:
     - Total sales (`total_amount` sum).
     - Order count.
     - Top products (based on `total_quantity` in `OrderItems`).
     - Active users count (`Users` with recent orders).
4. **Stock Alerts**:
   - GET /api/admin/stock-alerts: Low stock alerts fetch karo (`StockAlerts` with `Products`, `ProductVariants` join).
   - PUT /api/admin/stock-alerts/:alertId: Alert `status` update karo (e.g., sent).
   - Automatic alerts: `ProductVariants.stock_quantity` update ke saath `StockAlerts` trigger karo (threshold-based, e.g., stock < 10).
5. **Testing**:
   - Unit tests for user status updates, analytics, aur stock alerts.
   - Integration tests for automatic alert generation aur resolution.
   - Test analytics accuracy (e.g., sales totals, top products).

**Validation**:
- Admin users manage kar sakta hai (list, status update).
- Sales analytics sahi data show kar raha hai.
- Stock alerts generate aur resolve ho rahe hain (manual aur automatic).

---

### Phase 9: Owner & Store Management
**Objective**: Multi-vendor platform ke liye owners aur stores ke features develop karna.  
**Models Involved**: Owners, Stores, Products  
**Dependencies**: Phase 2 (users), Phase 3 (products)  
**APIs**:
- **Owners**:
  - POST /api/admin/owners (Create Owner)
  - GET /api/admin/owners (List Owners)
  - PUT /api/admin/owners/:ownerId (Update Owner)
  - DELETE /api/admin/owners/:ownerId (Soft Delete Owner)
- **Stores**:
  - POST /api/stores (Create Store - Admin/Owner)
  - GET /api/stores (List Stores - Admin/Owner)
  - PUT /api/stores/:storeId (Update Store)
  - DELETE /api/stores/:storeId (Soft Delete Store)

**Steps**:
1. **Database Setup**:
   - Tables create karo: `Owners`, `Stores`.
   - **Owners**: `owner_id` (UUID), `name`, `phone_number` (unique), `email` (unique), `default_address`, `status` (enum: active, inactive, banned), `role` (enum: admin), `created_at`, `updated_at`.
   - **Stores**: `store_id` (UUID), `name`, `location`, `owner_id` (FK → Owners), `created_at`, `updated_at`.
2. **Owner Management**:
   - POST /api/admin/owners: Owner create karo, `email`, `phone_number` unique rakho.
   - GET /api/admin/owners: Owners list karo with related stores (`Stores` join).
   - PUT /api/admin/owners/:ownerId: Owner details update karo.
   - DELETE /api/admin/owners/:ownerId: `status` = inactive (soft delete).
3. **Store Management**:
   - POST /api/stores: Store create karo, `owner_id` assign karo (admin ya owner role).
   - GET /api/stores: Admin ke liye all stores, owner ke liye uske stores list karo.
   - PUT /api/stores/:storeId: Store update karo.
   - DELETE /api/stores/:storeId: Soft delete (`is_active` = false).
4. **Product Association**:
   - `Products` table mein `store_id` (FK → Stores, optional) add karo.
   - Store-specific products manage karo (filter by `store_id` in GET /api/products).
5. **Testing**:
   - Unit tests for owner/store CRUD operations.
   - Integration tests for store-product association aur access control.
   - Test admin vs owner permissions.

**Validation**:
- Owners aur stores create, update, delete ho rahe hain.
- Admin aur owner ke liye access control kaam kar raha hai.
- Store-specific products display ho rahe hain (if `store_id` used).

---

### Phase 10: Testing & Deployment
**Objective**: Pura project test karna aur production mein deploy karna.  
**Dependencies**: All previous phases complete  
**Steps**:
1. **Unit Testing**:
   - Har API ke liye unit tests likho (use Jest/Mocha).
   - Cover edge cases: invalid inputs, unauthorized access, zero stock, expired coupons.
2. **Integration Testing**:
   - Workflows test karo:
     - Customer: Signup → Login → Browse Products → Add to Cart (`CartItems`) → Place Order → Payment → Review.
     - Admin: Product Create → Order Manage → Stock Alert Resolve → Coupon Create.
     - Owner: Store Create → Product Add → Order Manage.
   - Database interactions test karo (e.g., stock updates, coupon redemptions, `CartItems` to `OrderItems` conversion).
3. **Load Testing**:
   - Tools like Artillery ya JMeter use karke high traffic test karo (e.g., 1000 concurrent users).
   - APIs ke response times aur server capacity check karo (target: < 200ms for GET /api/products).
4. **Security Testing**:
   - JWT validation, SQL injection, XSS prevention test karo.
   - Rate limiting (use `express-rate-limit`) aur input sanitization (`express-validator`) verify karo.
5. **Deployment**:
   - **Staging**: Staging environment mein deploy karo (e.g., Heroku, AWS EC2), end-to-end testing karo.
   - **Production**: Production server setup karo, database migrations run karo.
   - Monitoring tools integrate karo (e.g., New Relic, Prometheus).
   - CDN (e.g., Cloudflare) for media URLs (`ProductMediaURL`).
6. **Post-Deployment**:
   - GET /api/health monitor karo for uptime.
   - Error logs track karo (use Sentry).
   - Database backups aur disaster recovery plan banaye.

**Validation**:
- All APIs 90%+ test coverage ke saath pass ho rahe hain.
- Staging aur production environments stable hain.
- Load tests high traffic handle kar rahe hain (no crashes, < 1% error rate).
- Security tests pass ho rahe hain (no vulnerabilities).

---

### Key Notes
- **Public vs Admin Endpoints**: Public endpoints (e.g., /api/products) sab ke liye accessible hain, jabki admin endpoints (e.g., /api/admin/products) sirf admin role ke liye hain.
- **Optional APIs**: Forgot-password, reset-password optional hain, project needs ke hisaab se include karo.
- **Owner/Store Management**: Phase 9 multi-vendor platform ke liye relevant hai. Single-vendor ke liye skip kar sakta hai.
- **CartItems Clarification**: `Carts` table user ke cart ko represent karta hai, aur `CartItems` table individual items (products/variants) ko store karta hai. Ye dono alag tables hain aur is flow mein clearly differentiate kiye gaye hain.
- **Scalability**:
  - Caching (Redis) use karo for frequent queries (e.g., GET /api/products, GET /api/categories).
  - Async processing ke liye queues (RabbitMQ) implement karo (e.g., payment verification, email sending).
- **Error Handling**:
  - Har API mein proper error responses (400, 401, 404, 500) implement karo.
  - Global error handler banaye for consistent error messages (e.g., `{ "error": "Invalid input" }`).
- **Models Covered**: Ye flow 26 models ko cover karta hai: `Users`, `Owners`, `Addresses`, `Categories`, `Brands`, `Products`, `ProductVariants`, `ProductMedia`, `ProductMediaURL`, `Attributes`, `AttributeValues`, `VariantAttributeValues`, `Orders`, `OrderItems`, `Payments`, `Carts`, `CartItems`, `Wishlists`, `WishListItems`, `Coupons`, `CouponUsers`, `CouponRedemptions`, `DiscountRules`, `ProductReviews`, `StockAlerts`, `Stores`.
- **Development Tips**:
  - Har phase ke baad code review karo (use GitHub PRs).
  - API documentation banaye (Swagger/Postman collection).
  - Database indexing karo for performance (e.g., `Users.email`, `Products.slug`, `Orders.order_number`, `CartItems.cart_id`).
  - Use Sequelize transactions for critical operations (e.g., order placement, stock update, `CartItems` to `OrderItems`).
- **Confirmation**: `CartItems` table ab explicitly include kiya gaya hai aur uske references sahi kiye gaye hain. `ProductMediaURL`, `VariantAttributeValues`, `CouponUsers`, aur `DiscountRules` ke APIs aur steps bhi fully covered hain. Sabhi 26 models aur services ab 100% aligned hain.