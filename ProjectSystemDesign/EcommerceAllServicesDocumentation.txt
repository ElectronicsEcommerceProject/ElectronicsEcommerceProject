Electronics E-Commerce Project - Puri Service Documentation (Final & Verified)
(Sabhi Services, Endpoints, aur Workflow ke Sath)
1. Introduction
Ye documentation pura Electronics E-Commerce Project ke liye hai, jisme sabhi services ka detailed description diya gaya hai. Ye services user management, address management, product management, cart aur wishlist management, order management, coupon aur discount systems, payment integration, product reviews, admin-exclusive services, aur returns aur refunds ko cover karti hain. Sath hi, ek step-by-step workflow bhi shamil hai jo customer aur admin ke journey ko signup se lekar order placement aur management tak batata hai. Ye documentation database design ke sath fully aligned hai aur koi bhi cheez miss nahi hai. Sab kuch Hinglish mein likha gaya hai taaki naye developers ko samajh aaye.

2. User Management
User management mein user registration, login, password reset, profile update, aur address management ke features shamil hain.
2.1 User Registration

Endpoint: POST /api/auth/register
Description: Naye users (customers ya retailers) ko register karne ke liye. Customer example.com pe aur Retailer retailer.example.com pe register karte hain. Admin manually database mein add kiye jaate hain.
Request Body:{
  "name": "Amit Sharma",
  "email": "amit@example.com",
  "phone_number": "+911234567890",
  "password": "Pass@123",
  "role": "customer"
}


Database Interaction:
Users Table: Naya record create.
user_id: UUID (e.g., "u1x2y3")
name: "Amit Sharma"
email: "amit@example.com" (unique check)
phone_number: "+911234567890" (unique check)
role: "customer" (enum: customer, retailer, admin)
status: "active"
password: Hashed (bcrypt)




Validations:
Email aur phone_number unique hone chahiye.
Role valid enum hona chahiye (customer, retailer).


Response:{
  "message": "User registered successfully",
  "user_id": "u1x2y3",
  "role": "customer"
}



2.2 User Login

Endpoint: POST /api/auth/login
Description: Users ko authenticate karke JWT token deta hai taaki woh platform use kar sakein. Role ke hisaab se redirect hota hai (e.g., Admin → admin.example.com).
Request Body:{
  "email": "amit@example.com",
  "password": "Pass@123"
}


Database Interaction:
Users Table: Email se record fetch, password verify (bcrypt).
JWT token generate with user_id aur role.


Validations: Valid email aur password combination.
Response:{
  "token": "jwt_token_xyz",
  "role": "customer",
  "user_id": "u1x2y3"
}



2.3 Password Reset
Forgot Password

Endpoint: POST /api/auth/forgot-password
Description: Reset token email pe bhejta hai.
Request Body:{ "email": "amit@example.com" }


Database Interaction: Users table se email verify, token generate (temporary storage jaise cache mein).
Validations: Valid email.
Response:{ "message": "Password reset link sent to email" }



Reset Password

Endpoint: POST /api/auth/reset-password
Description: Token ke through password reset karta hai.
Request Body:{
  "token": "reset_token_xyz",
  "new_password": "NewPass@123"
}


Database Interaction: Token validate, Users table mein password update.
Validations: Valid token aur new password.
Response:{ "message": "Password reset successful" }



2.4 Update Profile

Endpoint: PUT /api/users/me
Description: Users ko apna profile update karne ke liye (name, email, phone_number). Password update ke liye alag endpoint use karo.
Request Body:{
  "name": "Amit Sharma",
  "email": "amit@example.com",
  "phone_number": "+911234567890"
}


Database Interaction:
Users Table: Name, email, phone_number update.


Validations:
User logged-in hona chahiye (JWT).
Email change karne par unique hona chahiye.


Response:{ "message": "Profile updated successfully" }



2.5 Address Management
Add Address

Endpoint: POST /api/users/addresses
Description: Naya address add karta hai. user_id JWT se automatically fetch hota hai.
Request Body:{
  "type": "home",
  "address": "123, MG Road",
  "city": "Delhi",
  "postal_code": "110001",
  "is_active": true
}


Database Interaction:
Addresses Table: Naya record create.
address_id: UUID (e.g., "a1x2y3")
user_id: "u1x2y3" (FK → Users, JWT se)
type: "home"
address: "123, MG Road"
city: "Delhi"
postal_code: "110001"
is_active: true




Validations:
User logged-in hona chahiye.
Address fields valid hone chahiye.


Response:{ "message": "Address added successfully", "address_id": "a1x2y3" }



Update Address

Endpoint: PUT /api/users/addresses/:id
Description: Existing address update karta hai.
Request Body:{
  "type": "home",
  "address": "456, New Road",
  "city": "Mumbai",
  "postal_code": "400001",
  "is_active": true
}


Database Interaction:
Addresses Table: Record update.


Validations:
User logged-in hona chahiye.
address_id user ka hona chahiye.


Response:{ "message": "Address updated successfully" }



Delete Address

Endpoint: DELETE /api/users/addresses/:id
Description: Address delete karta hai (soft delete with is_active = false).
Database Interaction:
Addresses Table: is_active ko false set karta hai.


Validations:
User logged-in hona chahiye.
address_id user ka hona chahiye.


Response:{ "message": "Address deleted successfully" }



List Addresses

Endpoint: GET /api/users/addresses
Description: User ke sabhi addresses list karta hai.
Database Interaction:
Addresses Table: Query all addresses for user_id where is_active = true.


Validations: User logged-in hona chahiye.
Response:[
  {
    "address_id": "a1x2y3",
    "type": "home",
    "address": "123, MG Road",
    "city": "Delhi",
    "postal_code": "110001"
  }
]



Set Default Address

Endpoint: PUT /api/users/default-address/:addressId
Description: User ka default address set karta hai.
Database Interaction:
Users Table: current_address_id update karta hai.


Validations:
User logged-in hona chahiye.
addressId user ka hona chahiye.


Response:{ "message": "Default address set successfully" }




3. Product Management
Product management mein categories, brands, products, variants, aur media add karne, browse karne, search karne, aur filter karne ke features shamil hain.
3.1 Add Category (Admin Only)

Endpoint: POST /api/admin/categories
Description: Naya category add karta hai (e.g., "Mobile Phones").
Request Body:{
  "name": "Mobile Phones",
  "slug": "mobile-phones",
  "target_role": "both",
  "parent_id": null
}


Database Interaction:
Categories Table: Naya record create.
id: UUID (e.g., "cat1x2y3")
name: "Mobile Phones"
slug: "mobile-phones" (unique check)
target_role: "both" (enum: customer, retailer, both)
parent_id: null (optional, for top-level category)




Validations:
Admin role required (JWT).
Slug unique hona chahiye.
target_role valid enum hona chahiye.
parent_id agar diya hai to valid category ID hona chahiye.


Response:{
  "message": "Category added successfully",
  "category_id": "cat1x2y3"
}



3.2 List Categories (Admin and Users)

Endpoint: GET /api/categories
Description: Sabhi categories ko tree structure mein return karta hai, sub-categories ke saath.
Database Interaction:
Categories Table: Query karta hai, parent_id ke basis pe hierarchy build karta hai.


Validations:
Role-based access: Customers aur Retailers ke liye target_role match hona chahiye.


Response:[
  {
    "id": "cat1x2y3",
    "name": "Mobile Phones",
    "slug": "mobile-phones",
    "target_role": "both",
    "sub_categories": []
  }
]



3.3 Add Brand (Admin Only)

Endpoint: POST /api/admin/brands
Description: Naya brand add karta hai (e.g., "Apple").
Request Body:{
  "name": "Apple",
  "slug": "apple"
}


Database Interaction:
Brands Table: Naya record create.
id: UUID (e.g., "br1x2y3")
name: "Apple"
slug: "apple" (unique check)




Validations:
Admin role required.
Slug unique hona chahiye.


Response:{
  "message": "Brand added successfully",
  "brand_id": "br1x2y3"
}



3.4 Add Product (Admin Only)

Endpoint: POST /api/admin/products
Description: Naya product add karta hai (e.g., "iPhone 15"). Stock variant level pe manage hota hai, base product ke liye optional.
Request Body:{
  "name": "iPhone 15",
  "slug": "iphone-15",
  "base_price": 79999,
  "category_id": "cat1x2y3",
  "brand_id": "br1x2y3",
  "is_active": true,
  "description": "Latest iPhone model",
  "short_description": "iPhone 15 with A16 chip"
}


Database Interaction:
Products Table: Naya record create.
id: UUID (e.g., "p1x2y3")
name: "iPhone 15"
slug: "iphone-15" (unique check)
base_price: 79999
category_id: "cat1x2y3" (FK → Categories)
brand_id: "br1x2y3" (FK → Brands)
is_active: true
description: "Latest iPhone model"
short_description: "iPhone 15 with A16 chip"




Validations:
Admin role required.
category_id aur brand_id valid hone chahiye.
Slug unique hona chahiye.


Response:{
  "message": "Product added successfully",
  "product_id": "p1x2y3"
}



3.5 Add Product Variant (Admin Only)

Endpoint: POST /api/admin/products/:id/variants
Description: Product ka variant add karta hai (e.g., "iPhone 15 128GB Black").
Request Body:{
  "price": 79999,
  "sku": "IPH15-128-BLACK",
  "stock_quantity": 50,
  "attributes": {
    "color": "Black",
    "storage": "128GB"
  }
}


Database Interaction:
ProductVariants Table: Naya record create.
id: UUID (e.g., "v1x2y3")
product_id: "p1x2y3" (FK → Products)
price: 79999
sku: "IPH15-128-BLACK" (unique check)
stock_quantity: 50


VariantAttributeValues Table: Attributes save.
variant_attribute_value_id: UUID
variant_id: "v1x2y3"
attribute_id: Attributes table se fetch (e.g., "color", "storage")
value: "Black" ya "128GB"




Validations:
Admin role required.
product_id valid hona chahiye.
SKU unique hona chahiye.
Attributes valid hone chahiye (Attributes table se match).


Response:{
  "message": "Variant added successfully",
  "variant_id": "v1x2y3"
}



3.6 Add Product Media (Admin Only)

Endpoint: POST /api/admin/products/:id/media
Description: Product ya variant ke liye images ya videos upload karta hai.
Request Body:{
  "media_url": "https://example.com/images/iphone15.jpg",
  "media_type": "image",
  "variant_id": "v1x2y3"
}


Database Interaction:
ProductMedia Table: Naya record create.
id: UUID (e.g., "m1x2y3")
product_id: "p1x2y3" (FK → Products)
variant_id: "v1x2y3" (FK → ProductVariants, optional)
media_url: "https://example.com/images/iphone15.jpg"
media_type: "image" (enum: image, video)




Validations:
Admin role required.
product_id valid hona chahiye.
variant_id agar diya hai to valid hona chahiye.
media_type valid enum hona chahiye.


Response:{
  "message": "Media added successfully",
  "media_id": "m1x2y3"
}



3.7 Update Stock (Admin Only)

Endpoint: PUT /api/admin/variants/:variantId/stock
Description: Variant ka stock manually update karta hai.
Request Body:{
  "stock_quantity": 150
}


Database Interaction:
ProductVariants Table: stock_quantity update.


Validations:
Admin role required.
stock_quantity positive integer hona chahiye.


Response:{ "message": "Stock updated successfully" }



3.8 Get Products (Role-Based)

Endpoint: GET /api/products
Description: Role ke hisaab se products return karta hai (customer, retailer, ya both).
Filters: GET /api/products?category=electronics&min_price=50000&max_price=100000&brand=apple
Database Interaction:
Products Table: Query karta hai, Categories aur Brands ke saath join.
Categories Table: target_role ke basis pe filter.
ProductVariants Table: Variants bhi include karna.


Validations: Role-based access (target_role se match).
Response:[
  {
    "id": "p1x2y3",
    "name": "iPhone 15",
    "slug": "iphone-15",
    "base_price": 79999,
    "category": "Mobile Phones",
    "brand": "Apple",
    "variants": [
      {
        "variant_id": "v1x2y3",
        "price": 79999,
        "stock_quantity": 50
      }
    ]
  }
]



3.9 Search & Filter Products

Endpoint: GET /api/products/search
Description: Products ko name, description, category, ya brand ke basis pe search aur filter karta hai.
Filters: GET /api/products/search?query=iphone&category=mobiles&min_price=50000&max_price=100000
Database Interaction:
Products Table: Search query perform karta hai.


Validations: Valid query parameters.
Response:[
  {
    "id": "p1x2y3",
    "name": "iPhone 15",
    "base_price": 79999
  }
]




4. Cart & Wishlist
Cart aur wishlist management mein products ko cart mein add karne, remove karne, aur wishlist mein save karne ke features shamil hain.
4.1 Cart Management
Add to Cart

Endpoint: POST /api/cart/items
Description: Product variant ko cart mein add karta hai.
Request Body:{
  "product_id": "p1x2y3",
  "variant_id": "v1x2y3",
  "quantity": 2
}


Database Interaction:
Carts Table: Naya record create ya existing update.
cart_id: UUID (e.g., "c1x2y3")
user_id: "u1x2y3" (FK → Users, JWT se)
product_id: "p1x2y3" (FK → Products)
variant_id: "v1x2y3" (FK → ProductVariants)
quantity: 2




Validations:
User logged-in hona chahiye.
product_id aur variant_id valid hone chahiye.
Sufficient stock hona chahiye.


Response:{ "message": "Item added to cart", "cart_id": "c1x2y3" }



Get Cart

Endpoint: GET /api/cart
Description: User ke cart items return karta hai, real-time prices ke saath.
Database Interaction:
Carts Table: Query karta hai, Products aur ProductVariants ke saath join.


Validations: User logged-in hona chahiye.
Response:[
  {
    "cart_id": "c1x2y3",
    "product_id": "p1x2y3",
    "variant_id": "v1x2y3",
    "quantity": 2,
    "price": 79999
  }
]



Update Cart Item

Endpoint: PUT /api/cart/items/:cartId
Description: Cart item ki quantity update karta hai.
Request Body:{
  "quantity": 3
}


Database Interaction:
Carts Table: quantity update.


Validations:
User logged-in hona chahiye.
cartId user ka hona chahiye.


Response:{ "message": "Cart item updated successfully" }



Remove from Cart

Endpoint: DELETE /api/cart/items/:cartId
Description: Item ko cart se remove karta hai.
Database Interaction:
Carts Table: Record delete karta hai.


Validations:
User logged-in hona chahiye.
cartId user ka hona chahiye.


Response:{ "message": "Item removed from cart" }



4.2 Wishlist Management
Add to Wishlist

Endpoint: POST /api/wishlist/items
Description: Product ko wishlist mein add karta hai.
Request Body:{
  "product_id": "p1x2y3",
  "variant_id": "v1x2y3"
}


Database Interaction:
Wishlists Table: Naya record create.
wishlist_id: UUID (e.g., "w1x2y3")
user_id: "u1x2y3" (FK → Users, JWT se)
product_id: "p1x2y3" (FK → Products)
variant_id: "v1x2y3" (FK → ProductVariants)




Validations:
User logged-in hona chahiye.
product_id aur variant_id valid hone chahiye.


Response:{ "message": "Item added to wishlist", "wishlist_id": "w1x2y3" }



Get Wishlist

Endpoint: GET /api/wishlist
Description: Wishlist items return karta hai.
Database Interaction:
Wishlists Table: Query karta hai, Products aur ProductVariants ke saath join.


Validations: User logged-in hona chahiye.
Response:[
  {
    "wishlist_id": "w1x2y3",
    "product_id": "p1x2y3",
    "variant_id": "v1x2y3",
    "name": "iPhone 15"
  }
]



Remove from Wishlist

Endpoint: DELETE /api/wishlist/items/:wishlistId
Description: Item ko wishlist se remove karta hai.
Database Interaction:
Wishlists Table: Record delete karta hai.


Validations:
User logged-in hona chahiye.
wishlistId user ka hona chahiye.


Response:{ "message": "Item removed from wishlist" }




5. Order Management
Order management mein order place karne, status update karne, aur cancellation ke features shamil hain.
5.1 Place Order

Endpoint: POST /api/orders
Description: Cart se order place karta hai.
Request Body:{
  "address_id": "a1x2y3",
  "coupon_code": "DISCOUNT10",
  "payment_method": "credit_card"
}


Database Interaction:
Orders Table: Naya record create.
order_id: UUID (e.g., "o1x2y3")
user_id: "u1x2y3" (FK → Users, JWT se)
total_amount: Calculated
status: "pending"
address_id: "a1x2y3" (FK → Addresses)


OrderItems Table: Cart items ko order items mein convert karna.
ProductVariants Table: Stock update karna.
CouponRedemptions Table: Agar coupon use hua, to record create.


Validations:
User logged-in hona chahiye.
Address valid hona chahiye.
Sufficient stock hona chahiye.
Coupon valid hona chahiye agar use kiya hai.


Response:{
  "message": "Order placed successfully",
  "order_id": "o1x2y3"
}



5.2 Order Status Update (Admin Only)

Endpoint: PUT /api/admin/orders/:orderId/status
Description: Order ka status update karta hai.
Request Body:{ "status": "shipped" }


Database Interaction:
Orders Table: status update.


Validations:
Admin role required.
Valid status (e.g., pending, shipped, delivered).


Response:{ "message": "Order status updated successfully" }



5.3 Order Cancellation (User)

Endpoint: PUT /api/orders/:orderId/cancel
Description: User order cancel karta hai, stock vapis add hota hai.
Database Interaction:
Orders Table: status ko "cancelled" set karna.
ProductVariants Table: Stock vapis add karna.


Validations:
User logged-in hona chahiye.
Order cancellable state mein hona chahiye (e.g., not shipped).


Response:{ "message": "Order cancelled successfully" }




6. Coupon & Discount Management
Coupon management mein coupons add karne aur order pe apply karne ke features shamil hain.
6.1 Add Coupon (Admin Only)

Endpoint: POST /api/admin/coupons
Description: Naya coupon add karta hai.
Request Body:{
  "code": "DISCOUNT10",
  "discount_type": "percentage",
  "discount_value": 10,
  "min_order_value": 1000,
  "max_uses": 100,
  "start_date": "2023-01-01",
  "end_date": "2023-12-31"
}


Database Interaction:
Coupons Table: Naya record create.


Validations:
Admin role required.
code unique hona chahiye.


Response:{
  "message": "Coupon added successfully",
  "coupon_id": "cp1x2y3"
}



6.2 Apply Coupon to Order

Endpoint: POST /api/orders/apply-coupon
Description: Coupon ko order pe apply karta hai.
Request Body:{
  "order_id": "o1x2y3",
  "coupon_code": "DISCOUNT10"
}


Database Interaction:
Coupon validate karna.
Orders Table: total_amount update karna.
CouponRedemptions Table: Record create.


Validations:
Valid coupon aur order.


Response:{ "message": "Coupon applied successfully" }




7. Payment Integration
Payment integration mein payment order create karne aur verify karne ke features shamil hain.
7.1 Create Payment Order

Endpoint: POST /api/payments/create-order
Description: Payment gateway ke liye order create karta hai.
Request Body:{
  "order_id": "o1x2y3",
  "amount": 79999
}


Integration: Razorpay ya Stripe ke saath integrate, payment link generate.
Response:{
  "payment_link": "https://paymentgateway.com/pay/xyz"
}



7.2 Verify Payment

Endpoint: POST /api/payments/verify
Description: Payment verify karta hai.
Request Body: Payment details from gateway.
Database Interaction:
Orders Table: status update (e.g., "paid").


Response:{ "message": "Payment verified successfully" }




8. Product Reviews
Product reviews mein review add karne aur list karne ke features shamil hain.
8.1 Add Review

Endpoint: POST /api/products/:productId/reviews
Description: Product ke liye review add karta hai.
Request Body:{
  "rating": 5,
  "comment": "Great product!"
}


Database Interaction:
Reviews Table: Naya record create.
user_id: JWT se
product_id: "p1x2y3"
rating: 5
comment: "Great product!"




Validations:
User logged-in hona chahiye.


Response:{ "message": "Review added successfully" }



8.2 Get Reviews

Endpoint: GET /api/products/:productId/reviews
Description: Product ke reviews list karta hai.
Database Interaction:
Reviews Table: Query karta hai.


Response:[
  {
    "user_id": "u1x2y3",
    "rating": 5,
    "comment": "Great product!"
  }
]




9. Admin Services
Admin services mein user management, analytics, aur stock alerts ke features shamil hain.
9.1 User Management

Endpoint: GET /api/admin/users
Description: Sabhi users list karta hai.
Response:[
  {
    "user_id": "u1x2y3",
    "name": "Amit Sharma",
    "role": "customer"
  }
]


Endpoint: PUT /api/admin/users/:userId/status
Description: User ka status update karta hai (e.g., ban/unban).
Request Body:{ "status": "banned" }


Response:{ "message": "User status updated" }



9.2 Sales Analytics

Endpoint: GET /api/admin/analytics
Description: Sales data, top products, etc. return karta hai.
Response:{
  "total_sales": 500000,
  "top_products": ["p1x2y3"]
}



9.3 Stock Alerts

Endpoint: GET /api/admin/stock-alerts
Description: Low stock wale products list karta hai.
Response:[
  {
    "variant_id": "v1x2y3",
    "stock_quantity": 5
  }
]




10. Returns & Refunds
Returns aur refunds mein return request aur approval ke features shamil hain.
10.1 Request Return

Endpoint: POST /api/orders/:orderId/return
Description: Return request create karta hai.
Request Body:{
  "reason": "Defective product"
}


Database Interaction:
Returns Table: Naya record create.


Response:{ "message": "Return request submitted" }



10.2 Approve/Reject Return (Admin)

Endpoint: PUT /api/admin/returns/:returnId
Description: Return approve ya reject karta hai.
Request Body:{ "status": "approved" }


Database Interaction:
Returns Table: Status update.
Agar approved, to stock aur refund handle karna.


Response:{ "message": "Return status updated" }




11. Workflow
Customer Journey

Signup/Login: User register karta hai ya login karta hai.
Browse Products: Categories aur brands ke through products browse karta hai.
Add to Cart: Products ko cart mein add karta hai.
Place Order: Cart se order place karta hai, address select karta hai, coupon apply karta hai, payment karta hai.
Track Order: Order status check karta hai.
Review Product: Order deliver hone ke baad product review deta hai.

Admin Journey

Login: Admin login karta hai.
Manage Products: Products, categories, brands add/update karta hai.
Manage Orders: Orders ko manage karta hai, status update karta hai.
Manage Users: Users ko ban/unban karta hai.
Analytics: Sales aur stock analytics dekhta hai.


Ab tera documentation complete hai, bhai! Sab sections models ke hisaab se aligned hain aur koi cheez miss nahi hai. Isko use karke development shuru kar sakta hai. Koi doubt ho to bol dena!
