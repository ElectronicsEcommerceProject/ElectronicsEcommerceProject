### Electronics E-Commerce Project - Puri Service Documentation (Final & Verified)

### 1. Introduction
Ye documentation Electronics E-Commerce Project ke liye hai, jisme sabhi services ka detailed description diya gaya hai. Ye services user management, address management, product management, cart aur wishlist management, order management, coupon aur discount systems, payment integration, product reviews, stock alerts, aur store management ko cover karti hain. Sath hi, ek step-by-step workflow bhi shamil hai jo customer, retailer, aur admin ke journey ko signup se lekar order placement, management, aur post-order activities tak batata hai. Ye documentation database design ke sath fully aligned hai, 26 Sequelize models ko cover karti hai: `Users`, `Owners`, `Addresses`, `Categories`, `Brands`, `Products`, `ProductVariants`, `ProductMedia`, `ProductMediaURL`, `Attributes`, `AttributeValues`, `VariantAttributeValues`, `Orders`, `OrderItems`, `Payments`, `Carts`, `CartItems`, `Wishlists`, `WishListItems`, `Coupons`, `CouponUsers`, `CouponRedemptions`, `DiscountRules`, `ProductReviews`, `StockAlerts`, `Stores`. Sab kuch Hinglish mein likha gaya hai taaki naye developers ko samajh aaye.

---

### 2. User Management
User management mein user registration, login, password reset, profile update, aur address management ke features shamil hain.

#### 2.1 User Registration
**Endpoint**: POST /api/auth/register  
**Description**: Naye users (customers ya retailers) ko register karne ke liye. Customers example.com pe aur retailers retailer.example.com pe register karte hain. Admins manually database mein add kiye jaate hain.  
**Request Body**:
```json
{
  "name": "Amit Sharma",
  "email": "amit@example.com",
  "phone_number": "+911234567890",
  "password": "Pass@123",
  "role": "customer"
}
```

**Database Interaction**:
- **Users Table**: Naya record create.
  - `user_id`: UUID (e.g., "u1x2y3")
  - `name`: "Amit Sharma"
  - `email`: "amit@example.com" (unique check)
  - `phone_number`: "+911234567890" (unique check)
  - `role`: "customer" (enum: customer, retailer, admin)
  - `status`: "active" (enum: active, inactive, banned)
  - `password`: Hashed (bcrypt)
  - `current_address_id`: null (updated later)
  - `created_at`, `updated_at`: Auto-managed

**Validations**:
- Email aur phone_number unique hone chahiye.
- Password strong hona chahiye (min 8 chars, with special char, number).
- Role valid enum hona chahiye (customer ya retailer; admin not allowed via API).

**Response**:
```json
{
  "message": "User registered successfully",
  "user_id": "u1x2y3",
  "role": "customer"
}
```

#### 2.2 User Login
**Endpoint**: POST /api/auth/login  
**Description**: Users ko authenticate karke JWT token deta hai taaki woh platform use kar sakein. Role ke hisaab se redirect hota hai (e.g., Admin → admin.example.com).  
**Request Body**:
```json
{
  "email": "amit@example.com",
  "password": "Pass@123"
}
```

**Database Interaction**:
- **Users Table**: Email se record fetch, password verify (bcrypt).
- JWT token generate with `user_id`, `role`.

**Validations**:
- Valid email aur password combination.
- User `status` = "active" hona chahiye.

**Response**:
```json
{
  "token": "jwt_token_xyz",
  "role": "customer",
  "user_id": "u1x2y3"
}
```

#### 2.3 Password Reset
**Forgot Password**  
**Endpoint**: POST /api/auth/forgot-password  
**Description**: Reset token email pe bhejta hai.  
**Request Body**:
```json
{ "email": "amit@example.com" }
```

**Database Interaction**:
- **Users Table**: Email verify.
- Temporary token generate (store in cache or DB with expiry).

**Validations**:
- Valid email registered hona chahiye.
- User `status` = "active" hona chahiye.

**Response**:
```json
{ "message": "Password reset link sent to email" }
```

**Reset Password**  
**Endpoint**: POST /api/auth/reset-password  
**Description**: Token ke through password reset karta hai.  
**Request Body**:
```json
{
  "token": "reset_token_xyz",
  "new_password": "NewPass@123"
}
```

**Database Interaction**:
- Token validate (from cache or DB).
- **Users Table**: `password` update (hashed).

**Validations**:
- Valid token (not expired).
- New password strong hona chahiye.

**Response**:
```json
{ "message": "Password reset successful" }
```

#### 2.4 Update Profile
**Endpoint**: PUT /api/users/me  
**Description**: Users ko apna profile update karne ke liye (name, email, phone_number). Password update ke liye alag endpoint use karo.  
**Request Body**:
```json
{
  "name": "Amit Sharma",
  "email": "amit_new@example.com",
  "phone_number": "+911234567890"
}
```

**Database Interaction**:
- **Users Table**: `name`, `email`, `phone_number` update for `user_id` (from JWT).

**Validations**:
- User logged-in hona chahiye (JWT).
- Email aur phone_number unique hone chahiye.
- Input fields valid format mein hone chahiye (e.g., email regex).

**Response**:
```json
{ "message": "Profile updated successfully" }
```

#### 2.5 Address Management
**Add Address**  
**Endpoint**: POST /api/users/addresses  
**Description**: Naya address add karta hai. `user_id` JWT se automatically fetch hota hai.  
**Request Body**:
```json
{
  "address_line1": "123, MG Road",
  "address_line2": "",
  "city": "Delhi",
  "state": "Delhi",
  "postal_code": "110001",
  "country": "India",
  "is_default": true,
  "is_active": true
}
```

**Database Interaction**:
- **Addresses Table**: Naya record create.
  - `id`: UUID (e.g., "a1x2y3")
  - `user_id`: "u1x2y3" (FK → Users, from JWT)
  - `address_line1`: "123, MG Road"
  - `address_line2`: "" (optional)
  - `city`: "Delhi"
  - `state`: "Delhi"
  - `postal_code`: "110001"
  - `country`: "India"
  - `is_default`: true
  - `is_active`: true
  - `created_at`, `updated_at`, `deleted_at`: Auto-managed (paranoid enabled)
- **Users Table**: Agar `is_default` true hai, to `current_address_id` update. Purane default address ka `is_default` false karo.

**Validations**:
- User logged-in hona chahiye.
- Mandatory fields (`address_line1`, `city`, `state`, `postal_code`, `country`) hone chahiye.
- `postal_code` valid format hona chahiye (country-specific regex).
- `is_default` true hone pe ensure only one default address per user.

**Response**:
```json
{ "message": "Address added successfully", "address_id": "a1x2y3" }
```

**Update Address**  
**Endpoint**: PUT /api/users/addresses/:id  
**Description**: Existing address update karta hai.  
**Request Body**:
```json
{
  "address_line1": "456, New Road",
  "address_line2": "",
  "city": "Mumbai",
  "state": "Maharashtra",
  "postal_code": "400001",
  "country": "India",
  "is_default": true,
  "is_active": true
}
```

**Database Interaction**:
- **Addresses Table**: Record update with `id`.
- **Users Table**: Agar `is_default` true hai, to `current_address_id` update, aur purane default address ka `is_default` false karo.

**Validations**:
- User logged-in hona chahiye.
- `id` user ka hona chahiye aur valid hona chahiye.
- Mandatory fields valid hone chahiye.

**Response**:
```json
{ "message": "Address updated successfully" }
```

**Delete Address**  
**Endpoint**: DELETE /api/users/addresses/:id  
**Description**: Address delete karta hai (soft delete with `is_active` = false).  
**Database Interaction**:
- **Addresses Table**: `is_active` = false aur `deleted_at` set karo.
- **Users Table**: Agar `current_address_id` deleted address ka hai, to null ya koi aur active address set karo.

**Validations**:
- User logged-in hona chahiye.
- `id` user ka hona chahiye aur valid hona chahiye.
- Address `is_active` = true hona chahiye.

**Response**:
```json
{ "message": "Address deleted successfully" }
```

**List Addresses**  
**Endpoint**: GET /api/users/addresses  
**Description**: User ke sabhi active addresses list karta hai.  
**Database Interaction**:
- **Addresses Table**: Query all addresses for `user_id` where `is_active` = true.

**Validations**:
- User logged-in hona chahiye.

**Response**:
```json
[
  {
    "address_id": "a1x2y3",
    "address_line1": "123, MG Road",
    "city": "Delhi",
    "postal_code": "110001",
    "is_default": true,
    "is_active": true
  }
]
```

**Set Default Address**  
**Endpoint**: PUT /api/users/default-address/:addressId  
**Description**: User ka default address set karta hai.  
**Database Interaction**:
- **Users Table**: `current_address_id` update to `addressId`.
- **Addresses Table**: New address ka `is_default` = true, purane default address ka `is_default` = false.

**Validations**:
- User logged-in hona chahiye.
- `addressId` user ka hona chahiye aur `is_active` = true hona chahiye.

**Response**:
```json
{ "message": "Default address set successfully" }
```

---

### 3. Product Management
Product management mein categories, brands, products, variants, media, aur attributes add karne, browse karne, search karne, aur filter karne ke features shamil hain.

#### 3.1 Add Category (Admin Only)
**Endpoint**: POST /api/admin/categories  
**Description**: Naya category add karta hai (e.g., "Mobile Phones").  
**Request Body**:
```json
{
  "name": "Mobile Phones",
  "slug": "mobile-phones",
  "target_role": "both",
  "parent_id": null,
  "is_active": true
}
```

**Database Interaction**:
- **Categories Table**: Naya record create.
  - `id`: UUID (e.g., "cat1x2y3")
  - `name`: "Mobile Phones"
  - `slug`: "mobile-phones" (unique check)
  - `target_role`: "both" (enum: customer, retailer, both)
  - `parent_id`: null (optional, FK → Categories for sub-categories)
  - `is_active`: true
  - `created_by`: UUID (admin user_id, from JWT)
  - `created_at`, `updated_at`: Auto-managed

**Validations**:
- Admin role required (JWT).
- `slug` unique hona chahiye.
- `target_role` valid enum hona chahiye.
- `parent_id` agar diya hai to valid aur `is_active` = true category hona chahiye.

**Response**:
```json
{
  "message": "Category added successfully",
  "category_id": "cat1x2y3"
}
```

#### 3.2 List Categories (Admin and Users)
**Endpoint**: GET /api/categories  
**Description**: Sabhi active categories ko tree structure mein return karta hai, sub-categories ke saath.  
**Query Parameters**: `?role=customer` (optional, filters by `target_role`)  
**Database Interaction**:
- **Categories Table**: Query active categories (`is_active` = true), `parent_id` ke basis pe hierarchy build karta hai.
- Filter by `target_role` if provided.

**Validations**:
- Role-based access: Customers aur retailers ke liye `target_role` match hona chahiye.
- Public endpoint, no JWT required.

**Response**:
```json
[
  {
    "id": "cat1x2y3",
    "name": "Mobile Phones",
    "slug": "mobile-phones",
    "target_role": "both",
    "is_active": true,
    "sub_categories": []
  }
]
```

#### 3.3 Update Category (Admin Only)
**Endpoint**: PUT /api/admin/categories/:categoryId  
**Description**: Category details update karta hai.  
**Request Body**:
```json
{
  "name": "Smartphones",
  "slug": "smartphones",
  "target_role": "both",
  "parent_id": null,
  "is_active": true
}
```

**Database Interaction**:
- **Categories Table**: Record update with `id`.

**Validations**:
- Admin role required.
- `categoryId` valid hona chahiye.
- `slug` unique hona chahiye.
- `parent_id` valid ya null hona chahiye.

**Response**:
```json
{ "message": "Category updated successfully" }
```

#### 3.4 Delete Category (Admin Only)
**Endpoint**: DELETE /api/admin/categories/:categoryId  
**Description**: Category soft delete karta hai (`is_active` = false).  
**Database Interaction**:
- **Categories Table**: `is_active` = false.
- **Products Table**: Related products ko `is_active` = false karo (cascade effect).

**Validations**:
- Admin role required.
- `categoryId` valid hona chahiye.
- No active sub-categories ya products hone chahiye.

**Response**:
```json
{ "message": "Category deleted successfully" }
```

#### 3.5 Add Brand (Admin Only)
**Endpoint**: POST /api/admin/brands  
**Description**: Naya brand add karta hai (e.g., "Apple").  
**Request Body**:
```json
{
  "name": "Apple",
  "slug": "apple",
  "is_active": true
}
```

**Database Interaction**:
- **Brands Table**: Naya record create.
  - `id`: UUID (e.g., "br1x2y3")
  - `name`: "Apple"
  - `slug`: "apple" (unique check)
  - `is_active`: true
  - `created_by`: UUID (admin user_id, from JWT)
  - `created_at`, `updated_at`: Auto-managed

**Validations**:
- Admin role required.
- `slug` unique hona chahiye.
- `name` non-empty hona chahiye.

**Response**:
```json
{
  "message": "Brand added successfully",
  "brand_id": "br1x2y3"
}
```

#### 3.6 List Brands (Admin and Users)
**Endpoint**: GET /api/brands  
**Description**: Sabhi active brands list karta hai.  
**Database Interaction**:
- **Brands Table**: Query active brands (`is_active` = true).

**Validations**:
- Public endpoint, no JWT required.

**Response**:
```json
[
  {
    "id": "br1x2y3",
    "name": "Apple",
    "slug": "apple",
    "is_active": true
  }
]
```

#### 3.7 Update Brand (Admin Only)
**Endpoint**: PUT /api/admin/brands/:brandId  
**Description**: Brand details update karta hai.  
**Request Body**:
```json
{
  "name": "Apple Inc",
  "slug": "apple-inc",
  "is_active": true
}
```

**Database Interaction**:
- **Brands Table**: Record update with `id`.

**Validations**:
- Admin role required.
- `brandId` valid hona chahiye.
- `slug` unique hona chahiye.

**Response**:
```json
{ "message": "Brand updated successfully" }
```

#### 3.8 Delete Brand (Admin Only)
**Endpoint**: DELETE /api/admin/brands/:brandId  
**Description**: Brand soft delete karta hai (`is_active` = false).  
**Database Interaction**:
- **Brands Table**: `is_active` = false.
- **Products Table**: Related products ko `is_active` = false karo.

**Validations**:
- Admin role required.
- `brandId` valid hona chahiye.
- No active products hone chahiye.

**Response**:
```json
{ "message": "Brand deleted successfully" }
```

#### 3.9 Add Product (Admin Only)
**Endpoint**: POST /api/admin/products  
**Description**: Naya product add karta hai (e.g., "iPhone 15"). Stock variant level pe manage hota hai.  
**Request Body**:
```json
{
  "name": "iPhone 15",
  "slug": "iphone-15",
  "base_price": 79999,
  "category_id": "cat1x2y3",
  "brand_id": "br1x2y3",
  "store_id": "s1x2y3",
  "is_active": true,
  "is_featured": false,
  "description": "Latest iPhone model",
  "short_description": "iPhone 15 with A16 chip",
  "rating_average": 0,
  "rating_count": 0
}
```

**Database Interaction**:
- **Products Table**: Naya record create.
  - `product_id`: UUID (e.g., "p1x2y3")
  - `name`: "iPhone 15"
  - `slug`: "iphone-15" (unique check)
  - `base_price`: 79999
  - `category_id`: "cat1x2y3" (FK → Categories)
  - `brand_id`: "br1x2y3" (FK → Brands)
  - `store_id`: "s1x2y3" (FK → Stores, optional)
  - `is_active`: true
  - `is_featured`: false
  - `description`: "Latest iPhone model"
  - `short_description`: "iPhone 15 with A16 chip"
  - `rating_average`: 0
  - `rating_count`: 0
  - `created_by`: UUID (admin user_id, from JWT)
  - `created_at`, `updated_at`: Auto-managed

**Validations**:
- Admin role required.
- `category_id`, `brand_id`, `store_id` (if provided) valid hone chahiye.
- `slug` unique hona chahiye.
- `base_price` positive hona chahiye.
- `store_id` valid store hona chahiye (if multi-vendor).

**Response**:
```json
{
  "message": "Product added successfully",
  "product_id": "p1x2y3"
}
```

#### 3.10 Update Product (Admin Only)
**Endpoint**: PUT /api/admin/products/:productId  
**Description**: Product details update karta hai.  
**Request Body**:
```json
{
  "name": "iPhone 15 Pro",
  "slug": "iphone-15-pro",
  "base_price": 99999,
  "is_active": true
}
```

**Database Interaction**:
- **Products Table**: Record update with `product_id`.

**Validations**:
- Admin role required.
- `productId` valid hona chahiye.
- `slug` unique hona chahiye.

**Response**:
```json
{ "message": "Product updated successfully" }
```

#### 3.11 Delete Product (Admin Only)
**Endpoint**: DELETE /api/admin/products/:productId  
**Description**: Product soft delete karta hai (`is_active` = false).  
**Database Interaction**:
- **Products Table**: `is_active` = false.
- **ProductVariants Table**: Related variants ko `is_active` = false karo.

**Validations**:
- Admin role required.
- `productId` valid hona chahiye.
- No active orders with this product hone chahiye.

**Response**:
```json
{ "message": "Product deleted successfully" }
```

#### 3.12 Add Product Variant (Admin Only)
**Endpoint**: POST /api/admin/products/:productId/variants  
**Description**: Product ka variant add karta hai (e.g., "iPhone 15 128GB Black").  
**Request Body**:
```json
{
  "price": 79999,
  "sku": "IPH15-128-BLACK",
  "stock_quantity": 50,
  "is_active": true,
  "description": "iPhone 15 128GB Black",
  "short_description": "128GB Black variant",
  "attributes": [
    { "attribute_id": "attr1", "attribute_value_id": "val1" }, // e.g., Color: Black
    { "attribute_id": "attr2", "attribute_value_id": "val2" }  // e.g., Storage: 128GB
  ]
}
```

**Database Interaction**:
- **ProductVariants Table**: Naya record create.
  - `product_variant_id`: UUID (e.g., "v1x2y3")
  - `product_id`: "p1x2y3" (FK → Products)
  - `price`: 79999
  - `sku`: "IPH15-128-BLACK" (unique check)
  - `stock_quantity`: 50
  - `is_active`: true
  - `description`: "iPhone 15 128GB Black"
  - `short_description`: "128GB Black variant"
  - `created_by`: UUID (admin user_id, from JWT)
  - `created_at`, `updated_at`: Auto-managed
- **VariantAttributeValues Table**: Attributes save.
  - `variant_attribute_value_id`: UUID
  - `product_variant_id`: "v1x2y3" (FK → ProductVariants)
  - `product_attribute_id`: "attr1" (FK → Attributes)
  - `product_attribute_value_id`: "val1" (FK → AttributeValues)
  - `created_at`, `updated_at`: Auto-managed

**Validations**:
- Admin role required.
- `product_id` valid hona chahiye.
- `sku` unique hona chahiye.
- `attributes` valid hone chahiye (`attribute_id` aur `attribute_value_id` match Attributes aur AttributeValues se).
- `stock_quantity` non-negative hona chahiye.
- `price` positive hona chahiye.

**Response**:
```json
{
  "message": "Variant added successfully",
  "product_variant_id": "v1x2y3"
}
```

#### 3.13 Update Product Variant (Admin Only)
**Endpoint**: PUT /api/admin/variants/:variantId  
**Description**: Variant details update karta hai.  
**Request Body**:
```json
{
  "price": 82999,
  "stock_quantity": 75,
  "is_active": true
}
```

**Database Interaction**:
- **ProductVariants Table**: Record update with `product_variant_id`.
- **StockAlerts Table**: Agar `stock_quantity` low hai, to alert trigger karo.

**Validations**:
- Admin role required.
- `variantId` valid hona chahiye.
- `stock_quantity` non-negative hona chahiye.

**Response**:
```json
{ "message": "Variant updated successfully" }
```

#### 3.14 Delete Product Variant (Admin Only)
**Endpoint**: DELETE /api/admin/variants/:variantId  
**Description**: Variant soft delete karta hai (`is_active` = false).  
**Database Interaction**:
- **ProductVariants Table**: `is_active` = false.
- **CartItems Table**, **WishListItems Table**: Related entries remove karo.

**Validations**:
- Admin role required.
- `variantId` valid hona chahiye.
- No active orders with this variant hone chahiye.

**Response**:
```json
{ "message": "Variant deleted successfully" }
```

#### 3.15 Add Product Media (Admin Only)
**Endpoint**: POST /api/admin/products/:productId/media  
**Description**: Product ya variant ke liye images ya videos upload karta hai.  
**Request Body**:
```json
{
  "media_type": "image",
  "product_variant_id": "v1x2y3",
  "media_url": "https://cdn.example.com/iphone15-black.jpg",
  "is_active": true
}
```

**Database Interaction**:
- **ProductMedia Table**: Naya record create.
  - `product_media_id`: UUID (e.g., "m1x2y3")
  - `product_id`: "p1x2y3" (FK → Products)
  - `product_variant_id`: "v1x2y3" (FK → ProductVariants, optional)
  - `media_type`: "image" (enum: image, video)
  - `is_active`: true
  - `created_by`: UUID (admin user_id, from JWT)
  - `created_at`, `updated_at`: Auto-managed
- **ProductMediaURL Table**: Media URL save.
  - `product_media_url_id`: UUID (e.g., "mu1x2y3")
  - `product_media_id`: "m1x2y3" (FK → ProductMedia)
  - `product_media_url`: "https://cdn.example.com/iphone15-black.jpg"
  - `media_type`: "image"
  - `is_active`: true
  - `created_by`: UUID (admin user_id, from JWT)
  - `created_at`, `updated_at`: Auto-managed

**Validations**:
- Admin role required.
- `product_id` valid hona chahiye.
- `product_variant_id` agar diya hai to valid hona chahiye.
- `media_type` valid enum hona chahiye.
- `media_url` valid URL hona chahiye (regex check).

**Response**:
```json
{
  "message": "Media added successfully",
  "media_id": "m1x2y3",
  "media_url_id": "mu1x2y3"
}
```

#### 3.16 Update Product Media (Admin Only)
**Endpoint**: PUT /api/admin/media/:mediaId  
**Description**: Media details update karta hai.  
**Request Body**:
```json
{
  "media_type": "image",
  "is_active": true
}
```

**Database Interaction**:
- **ProductMedia Table**: Record update with `product_media_id`.
- **ProductMediaURL Table**: Related URLs update if needed.

**Validations**:
- Admin role required.
- `mediaId` valid hona chahiye.
- `media_type` valid enum hona chahiye.

**Response**:
```json
{ "message": "Media updated successfully" }
```

#### 3.17 Delete Product Media (Admin Only)
**Endpoint**: DELETE /api/admin/media/:mediaId  
**Description**: Media soft delete karta hai (`is_active` = false).  
**Database Interaction**:
- **ProductMedia Table**: `is_active` = false.
- **ProductMediaURL Table**: Related URLs ko `is_active` = false karo.

**Validations**:
- Admin role required.
- `mediaId` valid hona chahiye.

**Response**:
```json
{ "message": "Media deleted successfully" }
```

#### 3.18 Add Product Media URL (Admin Only)
**Endpoint**: POST /api/admin/products/:productId/media/:mediaId/urls  
**Description**: Media ke liye additional URL add karta hai.  
**Request Body**:
```json
{
  "product_media_url": "https://cdn.example.com/iphone15-black-side.jpg",
  "media_type": "image",
  "is_active": true
}
```

**Database Interaction**:
- **ProductMediaURL Table**: Naya record create.
  - `product_media_url_id`: UUID
  - `product_media_id`: "m1x2y3" (FK → ProductMedia)
  - `product_media_url`: "https://cdn.example.com/iphone15-black-side.jpg"
  - `media_type`: "image"
  - `is_active`: true
  - `created_by`: UUID (admin user_id, from JWT)
  - `created_at`, `updated_at`: Auto-managed

**Validations**:
- Admin role required.
- `mediaId` valid hona chahiye.
- `media_type` valid enum hona chahiye.
- `product_media_url` valid URL hona chahiye.

**Response**:
```json
{
  "message": "Media URL added successfully",
  "media_url_id": "mu2x3y4"
}
```

#### 3.19 Update Product Media URL (Admin Only)
**Endpoint**: PUT /api/admin/media/:mediaId/urls/:urlId  
**Description**: Media URL update karta hai.  
**Request Body**:
```json
{
  "product_media_url": "https://cdn.example.com/iphone15-black-updated.jpg",
  "is_active": true
}
```

**Database Interaction**:
- **ProductMediaURL Table**: Record update with `product_media_url_id`.

**Validations**:
- Admin role required.
- `mediaId` aur `urlId` valid hone chahiye.
- `product_media_url` valid URL hona chahiye.

**Response**:
```json
{ "message": "Media URL updated successfully" }
```

#### 3.20 Delete Product Media URL (Admin Only)
**Endpoint**: DELETE /api/admin/media/:mediaId/urls/:urlId  
**Description**: Media URL soft delete karta hai (`is_active` = false).  
**Database Interaction**:
- **ProductMediaURL Table**: `is_active` = false.

**Validations**:
- Admin role required.
- `mediaId` aur `urlId` valid hone chahiye.

**Response**:
```json
{ "message": "Media URL deleted successfully" }
```

#### 3.21 Update Stock (Admin Only)
**Endpoint**: PUT /api/admin/variants/:variantId/stock  
**Description**: Variant ka stock manually update karta hai.  
**Request Body**:
```json
{
  "stock_quantity": 150
}
```

**Database Interaction**:
- **ProductVariants Table**: `stock_quantity` update.
- **StockAlerts Table**: Agar stock low hai (threshold, e.g., < 10), to naya alert create.
  - `alert_id`: UUID (e.g., "sa1x2y3")
  - `product_id`: "p1x2y3" (FK → Products)
  - `product_variant_id`: "v1x2y3" (FK → ProductVariants)
  - `stock_level`: 150
  - `status`: "pending" (enum: pending, sent)
  - `created_at`, `updated_at`: Auto-managed

**Validations**:
- Admin role required.
- `variantId` valid hona chahiye.
- `stock_quantity` non-negative hona chahiye.

**Response**:
```json
{ "message": "Stock updated successfully" }
```

#### 3.22 Get Products (Role-Based)
**Endpoint**: GET /api/products  
**Description**: Role ke hisaab se active products return karta hai (customer, retailer, ya both).  
**Query Parameters**: `?category=electronics&min_price=50000&max_price=100000&brand=apple&store_id=s1x2y3`  
**Database Interaction**:
- **Products Table**: Query active products (`is_active` = true), `Categories` aur `Brands` ke saath join.
- **Categories Table**: `target_role` ke basis pe filter.
- **ProductVariants Table**: Active variants include karo (`is_active` = true).
- **ProductMedia Table**, **ProductMediaURL Table**: Active media URLs fetch karo (`is_active` = true).
- **Stores Table**: Filter by `store_id` if provided.

**Validations**:
- Role-based access: `target_role` se match (from JWT or query param).
- Filters valid hone chahiye (e.g., `category`, `brand`, `store_id`).
- Pagination parameters (`page`, `limit`) valid hone chahiye.

**Response**:
```json
[
  {
    "product_id": "p1x2y3",
    "name": "iPhone 15",
    "slug": "iphone-15",
    "base_price": 79999,
    "category": { "id": "cat1x2y3", "name": "Mobile Phones" },
    "brand": { "id": "br1x2y3", "name": "Apple" },
    "store_id": "s1x2y3",
    "rating_average": 4.5,
    "rating_count": 10,
    "variants": [
      {
        "product_variant_id": "v1x2y3",
        "price": 79999,
        "stock_quantity": 50,
        "sku": "IPH15-128-BLACK",
        "attributes": [
          { "name": "Color", "value": "Black" },
          { "name": "Storage", "value": "128GB" }
        ]
      }
    ],
    "media": [
      {
        "product_media_id": "m1x2y3",
        "media_type": "image",
        "urls": [
          { "product_media_url_id": "mu1x2y3", "url": "https://cdn.example.com/iphone15-black.jpg" }
        ]
      }
    ]
  }
]
```

#### 3.23 Get Product Details
**Endpoint**: GET /api/products/:productId  
**Description**: Ek product ki complete details return karta hai.  
**Database Interaction**:
- **Products Table**: Fetch product by `product_id`.
- **ProductVariants Table**: Active variants fetch karo.
- **ProductMedia Table**, **ProductMediaURL Table**: Active media fetch karo.
- **Categories Table**, **Brands Table**, **Stores Table**: Related details fetch karo.

**Validations**:
- `productId` valid hona chahiye.
- Product `is_active` = true hona chahiye.
- Role-based access (`target_role` match).

**Response**:
```json
{
  "product_id": "p1x2y3",
  "name": "iPhone 15",
  "slug": "iphone-15",
  "base_price": 79999,
  "category": { "id": "cat1x2y3", "name": "Mobile Phones" },
  "brand": { "id": "br1x2y3", "name": "Apple" },
  "store_id": "s1x2y3",
  "variants": [
    {
      "product_variant_id": "v1x2y3",
      "price": 79999,
      "stock_quantity": 50,
      "attributes": [
        { "name": "Color", "value": "Black" }
      ]
    }
  ],
  "media": [
    {
      "product_media_id": "m1x2y3",
      "media_type": "image",
      "urls": [
        { "product_media_url_id": "mu1x2y3", "url": "https://cdn.example.com/iphone15-black.jpg" }
      ]
    }
  ]
}
```

#### 3.24 Search & Filter Products
**Endpoint**: GET /api/products/search  
**Description**: Products ko name, description, category, brand, ya store ke basis pe search aur filter karta hai.  
**Query Parameters**: `?query=iphone&category=mobiles&min_price=50000&max_price=100000&brand=apple&store_id=s1x2y3`  
**Database Interaction**:
- **Products Table**: Search query perform karta hai (LIKE ya full-text search on `name`, `description`).
- **Categories Table**, **Brands Table**, **Stores Table**: Filters apply karo.
- **ProductVariants Table**: Price range filter ke liye join.

**Validations**:
- Query parameters valid hone chahiye (e.g., `min_price` < `max_price`).
- Role-based access (`target_role` match).

**Response**:
```json
[
  {
    "product_id": "p1x2y3",
    "name": "iPhone 15",
    "base_price": 79999,
    "category": { "id": "cat1x2y3", "name": "Mobile Phones" },
    "brand": { "id": "br1x2y3", "name": "Apple" },
    "store_id": "s1x2y3"
  }
]
```

#### 3.25 Add Attribute (Admin Only)
**Endpoint**: POST /api/admin/attributes  
**Description**: Product attribute add karta hai (e.g., "Color").  
**Request Body**:
```json
{
  "name": "Color",
  "is_active": true
}
```

**Database Interaction**:
- **Attributes Table**: Naya record create.
  - `id`: UUID (e.g., "attr1")
  - `name`: "Color"
  - `is_active`: true
  - `created_by`: UUID (admin user_id, from JWT)
  - `created_at`, `updated_at`: Auto-managed

**Validations**:
- Admin role required.
- `name` unique aur non-empty hona chahiye.

**Response**:
```json
{
  "message": "Attribute added successfully",
  "attribute_id": "attr1"
}
```

#### 3.26 Add Attribute Value (Admin Only)
**Endpoint**: POST /api/admin/attributes/:attributeId/values  
**Description**: Attribute ke liye value add karta hai (e.g., "Black" for Color).  
**Request Body**:
```json
{
  "value": "Black",
  "is_active": true
}
```

**Database Interaction**:
- **AttributeValues Table**: Naya record create.
  - `id`: UUID (e.g., "val1")
  - `attribute_id`: "attr1" (FK → Attributes)
  - `value`: "Black"
  - `is_active`: true
  - `created_by`: UUID (admin user_id, from JWT)
  - `created_at`, `updated_at`: Auto-managed

**Validations**:
- Admin role required.
- `attributeId` valid hona chahiye.
- `value` unique for given `attribute_id`.

**Response**:
```json
{
  "message": "Attribute value added successfully",
  "attribute_value_id": "val1"
}
```

#### 3.27 Update Attribute (Admin Only)
**Endpoint**: PUT /api/admin/attributes/:attributeId  
**Description**: Attribute update karta hai.  
**Request Body**:
```json
{
  "name": "Colour",
  "is_active": true
}
```

**Database Interaction**:
- **Attributes Table**: Record update with `id`.

**Validations**:
- Admin role required.
- `attributeId` valid hona chahiye.
- `name` unique hona chahiye.

**Response**:
```json
{ "message": "Attribute updated successfully" }
```

#### 3.28 Delete Attribute (Admin Only)
**Endpoint**: DELETE /api/admin/attributes/:attributeId  
**Description**: Attribute soft delete karta hai (`is_active` = false).  
**Database Interaction**:
- **Attributes Table**: `is_active` = false.
- **AttributeValues Table**: Related values ko `is_active` = false karo.

**Validations**:
- Admin role required.
- `attributeId` valid hona chahiye.
- No active `VariantAttributeValues` hone chahiye.

**Response**:
```json
{ "message": "Attribute deleted successfully" }
```

#### 3.29 Update Attribute Value (Admin Only)
**Endpoint**: PUT /api/admin/attributes/:attributeId/values/:valueId  
**Description**: Attribute value update karta hai.  
**Request Body**:
```json
{
  "value": "Dark Black",
  "is_active": true
}
```

**Database Interaction**:
- **AttributeValues Table**: Record update with `id`.

**Validations**:
- Admin role required.
- `attributeId` aur `valueId` valid hone chahiye.
- `value` unique for given `attribute_id`.

**Response**:
```json
{ "message": "Attribute value updated successfully" }
```

#### 3.30 Delete Attribute Value (Admin Only)
**Endpoint**: DELETE /api/admin/attributes/:attributeId/values/:valueId  
**Description**: Attribute value soft delete karta hai (`is_active` = false).  
**Database Interaction**:
- **AttributeValues Table**: `is_active` = false.
- **VariantAttributeValues Table**: Related mappings remove karo.

**Validations**:
- Admin role required.
- `attributeId` aur `valueId` valid hone chahiye.
- No active `VariantAttributeValues` hone chahiye.

**Response**:
```json
{ "message": "Attribute value deleted successfully" }
```

---

### 4. Cart & Wishlist
Cart aur wishlist management mein products ko cart mein add karne, remove karne, aur wishlist mein save karne ke features shamil hain. `Carts` table user ke cart ko represent karta hai, jabki `CartItems` table individual items ko store karta hai.

#### 4.1 Cart Management
**Add to Cart**  
**Endpoint**: POST /api/cart/items  
**Description**: Product variant ko cart mein add karta hai.  
**Request Body**:
```json
{
  "product_id": "p1x2y3",
  "product_variant_id": "v1x2y3",
  "quantity": 2
}
```

**Database Interaction**:
- **Carts Table**: User ka cart check karo, agar nahi hai to naya record create karo.
  - `cart_id`: UUID (e.g., "c1x2y3")
  - `user_id`: "u1x2y3" (FK → Users, from JWT)
  - `created_at`, `updated_at`: Auto-managed
- **CartItems Table**: Naya record create ya existing update (if same `product_variant_id`).
  - `cart_item_id`: UUID (e.g., "ci1x2y3")
  - `cart_id`: "c1x2y3" (FK → Carts)
  - `product_id`: "p1x2y3" (FK → Products)
  - `product_variant_id`: "v1x2y3" (FK → ProductVariants)
  - `quantity`: 2
  - `price_at_time`: Fetch from `ProductVariants.price` (e.g., 79999)
  - `discount_applied`: 0 (default, updated by coupons/discounts)
  - `final_price`: `price_at_time * quantity - discount_applied`
  - `created_at`, `updated_at`: Auto-managed
- **ProductVariants Table**: `stock_quantity` verify karo (`quantity` <= `stock_quantity`).
- **DiscountRules Table**: Auto-apply eligible discounts to `discount_applied`.

**Validations**:
- User logged-in hona chahiye (JWT).
- `product_id` aur `product_variant_id` valid aur `is_active` = true hone chahiye.
- `quantity` positive aur `stock_quantity` se kam ya barabar hona chahiye.
- Product `store_id` (if any) accessible to user role.

**Response**:
```json
{
  "message": "Item added to cart",
  "cart_item_id": "ci1x2y3"
}
```

**Get Cart**  
**Endpoint**: GET /api/cart  
**Description**: User ke cart items return karta hai, real-time prices ke saath.  
**Database Interaction**:
- **Carts Table**: User ka `cart_id` fetch karo.
- **CartItems Table**: Related items fetch karo with `product_id`, `product_variant_id`.
- **Products Table**, **ProductVariants Table**: Latest `price`, `stock_quantity`, aur product details fetch karo.
- **ProductMedia Table**, **ProductMediaURL Table**: Product images fetch karo.
- **DiscountRules Table**: Check for applicable discounts.

**Validations**:
- User logged-in hona chahiye.
- Cart exists hona chahiye.

**Response**:
```json
{
  "cart_id": "c1x2y3",
  "items": [
    {
      "cart_item_id": "ci1x2y3",
      "product_id": "p1x2y3",
      "product_variant_id": "v1x2y3",
      "quantity": 2,
      "price_at_time": 79999,
      "discount_applied": 0,
      "final_price": 159998,
      "product": {
        "name": "iPhone 15",
        "media": [
          { "product_media_url_id": "mu1x2y3", "url": "https://cdn.example.com/iphone15-black.jpg" }
        ]
      }
    }
  ],
  "total_amount": 159998
}
```

**Update Cart Item**  
**Endpoint**: PUT /api/cart/items/:cartItemId  
**Description**: Cart item ki quantity update karta hai.  
**Request Body**:
```json
{
  "quantity": 3
}
```

**Database Interaction**:
- **CartItems Table**: `quantity` aur `final_price` update (`final_price` = `price_at_time * quantity - discount_applied`).
- **ProductVariants Table**: `stock_quantity` verify karo.
- **DiscountRules Table**: Recalculate `discount_applied` if applicable.

**Validations**:
- User logged-in hona chahiye.
- `cartItemId` valid aur user ke cart ka hona chahiye.
- `quantity` positive aur `stock_quantity` se kam ya barabar hona chahiye.

**Response**:
```json
{ "message": "Cart item updated successfully" }
```

**Remove from Cart**  
**Endpoint**: DELETE /api/cart/items/:cartItemId  
**Description**: Item ko cart se remove karta hai.  
**Database Interaction**:
- **CartItems Table**: Record delete with `cart_item_id`.
- **Carts Table**: If no items left, optionally delete cart (or keep for future use).

**Validations**:
- User logged-in hona chahiye.
- `cartItemId` valid aur user ke cart ka hona chahiye.

**Response**:
```json
{ "message": "Item removed from cart" }
```

#### 4.2 Wishlist Management
**Add to Wishlist**  
**Endpoint**: POST /api/wishlist/items  
**Description**: Product ya variant ko wishlist mein add karta hai.  
**Request Body**:
```json
{
  "product_id": "p1x2y3",
  "product_variant_id": "v1x2y3"
}
```

**Database Interaction**:
- **Wishlists Table**: User ka wishlist check karo, agar nahi hai to naya create karo.
  - `wishlist_id`: UUID (e.g., "w1x2y3")
  - `user_id`: "u1x2y3" (FK → Users, from JWT)
  - `created_at`, `updated_at`: Auto-managed
- **WishListItems Table**: Naya record create (if not already present).
  - `wish_list_item_id`: UUID (e.g., "wi1x2y3")
  - `wishlist_id`: "w1x2y3" (FK → Wishlists)
  - `product_id`: "p1x2y3" (FK → Products)
  - `product_variant_id`: "v1x2y3" (FK → ProductVariants, optional)
  - `created_at`, `updated_at`: Auto-managed

**Validations**:
- User logged-in hona chahiye.
- `product_id` valid aur `is_active` = true hona chahiye.
- `product_variant_id` agar diya hai to valid aur `is_active` = true hona chahiye.
- Item already in wishlist nahi hona chahiye.

**Response**:
```json
{
  "message": "Item added to wishlist",
  "wish_list_item_id": "wi1x2y3"
}
```

**Get Wishlist**  
**Endpoint**: GET /api/wishlist  
**Description**: Wishlist items return karta hai with product details.  
**Database Interaction**:
- **Wishlists Table**: User ka `wishlist_id` fetch karo.
- **WishListItems Table**: Query items with `product_id`, `product_variant_id`.
- **Products Table**, **ProductVariants Table**: Product details fetch karo.
- **ProductMedia Table**, **ProductMediaURL Table**: Images fetch karo.

**Validations**:
- User logged-in hona chahiye.
- Wishlist exists hona chahiye.

**Response**:
```json
[
  {
    "wish_list_item_id": "wi1x2y3",
    "product_id": "p1x2y3",
    "product_variant_id": "v1x2y3",
    "product": {
      "name": "iPhone 15",
      "price": 79999,
      "media": [
        { "product_media_url_id": "mu1x2y3", "url": "https://cdn.example.com/iphone15-black.jpg" }
      ]
    }
  }
]
```

**Remove from Wishlist**  
**Endpoint**: DELETE /api/wishlist/items/:wishListItemId  
**Description**: Item ko wishlist se remove karta hai.  
**Database Interaction**:
- **WishListItems Table**: Record delete with `wish_list_item_id`.
- **Wishlists Table**: If no items left, optionally keep wishlist.

**Validations**:
- User logged-in hona chahiye.
- `wishListItemId` valid aur user ke wishlist ka hona chahiye.

**Response**:
```json
{ "message": "Item removed from wishlist" }
```

---

### 5. Order Management
Order management mein order place karne, status update karne, aur cancellation ke features shamil hain.

#### 5.1 Place Order
**Endpoint**: POST /api/orders  
**Description**: Cart se order place karta hai, stock update karta hai, aur payment initiate karta hai.  
**Request Body**:
```json
{
  "address_id": "a1x2y3",
  "coupon_id": "cp1x2y3",
  "payment_method": "credit_card"
}
```

**Database Interaction**:
- **Carts Table**: User ka `cart_id` fetch karo.
- **CartItems Table**: Cart items fetch karo for order creation.
- **Orders Table**: Naya record create.
  - `order_id`: UUID (e.g., "o1x2y3")
  - `user_id`: "u1x2y3" (FK → Users, from JWT)
  - `address_id`: "a1x2y3" (FK → Addresses)
  - `payment_id`: null (updated after payment)
  - `payment_method`: "credit_card" (enum: credit_card, debit_card, upi, cod, net_banking)
  - `order_status`: "pending" (enum: pending, processing, shipped, delivered, cancelled)
  - `payment_status`: "pending" (enum: pending, paid, failed, refunded)
  - `subtotal`: Sum of `CartItems.final_price`
  - `shipping_cost`: Based on address/business logic (e.g., 100)
  - `tax_amount`: Based on business rules (e.g., 18% GST)
  - `discount_amount`: From `CartItems.discount_applied` or coupon
  - `total_amount`: `subtotal + shipping_cost + tax_amount - discount_amount`
  - `order_number`: Unique (e.g., "ORD-2025-001")
  - `order_date`: Current date (e.g., "2025-05-07")
  - `created_at`, `updated_at`: Auto-managed
- **OrderItems Table**: `CartItems` se records create karo.
  - `order_item_id`: UUID (e.g., "oi1x2y3")
  - `order_id`: "o1x2y3" (FK → Orders)
  - `product_id`: "p1x2y3" (FK → Products)
  - `product_variant_id`: "v1x2y3" (FK → ProductVariants)
  - `total_quantity`: From `CartItems.quantity`
  - `price_at_time`: From `CartItems.price_at_time`
  - `discount_applied`: From `CartItems.discount_applied`
  - `final_price`: From `CartItems.final_price`
  - `created_at`, `updated_at`: Auto-managed
- **ProductVariants Table**: `stock_quantity` reduce by `total_quantity` (use transaction to ensure atomicity).
- **CouponRedemptions Table**: Agar `coupon_id` diya hai, to record create.
  - `id`: UUID (e.g., "cr1x2y3")
  - `user_id`: "u1x2y3" (FK → Users)
  - `coupon_id`: "cp1x2y3" (FK → Coupons)
  - `order_id`: "o1x2y3" (FK → Orders)
  - `redeemed_at`: Current date
  - `discount_amount`: Calculated from coupon
  - `created_at`, `updated_at`: Auto-managed
- **Payments Table**: Payment record create.
  - `payment_id`: UUID (e.g., "pay1x2y3")
  - `user_id`: "u1x2y3" (FK → Users)
  - `amount`: `total_amount`
  - `currency`: "INR"
  - `payment_status`: "pending"
  - `payment_method`: "credit_card"
  - `created_at`, `updated_at`: Auto-managed
- **CartItems Table**: Clear user’s cart items after order placement.
- **StockAlerts Table**: Check if `stock_quantity` low hai post-update, create alert if needed.

**Validations**:
- User logged-in hona chahiye.
- `address_id` valid aur user ka hona chahiye (`is_active` = true).
- `coupon_id` agar diya hai to valid hona chahiye (`is_active`, `valid_from`, `valid_to`, `usage_limit`, `target_role`).
- `payment_method` valid enum hona chahiye.
- Cart non-empty hona chahiye.
- Sufficient stock for all `CartItems` (`quantity` <= `stock_quantity`).
- Transaction ensure kare atomicity (stock update, order creation).

**Response**:
```json
{
  "message": "Order placed successfully",
  "order_id": "o1x2y3",
  "order_number": "ORD-2025-001",
  "payment_id": "pay1x2y3"
}
```

#### 5.2 Order Status Update (Admin Only)
**Endpoint**: PUT /api/admin/orders/:orderId/status  
**Description**: Order ka status update karta hai (e.g., shipped, delivered).  
**Request Body**:
```json
{
  "order_status": "shipped"
}
```

**Database Interaction**:
- **Orders Table**: `order_status` update to provided value.
- **ProductVariants Table**: Agar `order_status` = "cancelled", to `stock_quantity` vapis add karo based on `OrderItems.total_quantity`.

**Validations**:
- Admin role required.
- `orderId` valid hona chahiye.
- `order_status` valid enum hona chahiye.
- Status transition valid hona chahiye (e.g., pending → processing, not delivered → pending).

**Response**:
```json
{ "message": "Order status updated successfully" }
```

#### 5.3 Order Cancellation (User)
**Endpoint**: PUT /api/orders/:orderId/cancel  
**Description**: User order cancel karta hai, stock vapis add hota hai, refund initiated if applicable.  
**Database Interaction**:
- **Orders Table**: `order_status` = "cancelled", `payment_status` = "refunded" if paid.
- **OrderItems Table**: Fetch items for stock update.
- **ProductVariants Table**: `stock_quantity` vapis add based on `total_quantity`.
- **Payments Table**: Initiate refund if `payment_status` = "paid".
- **StockAlerts Table**: Check stock post-update, remove resolved alerts if any.

**Validations**:
- User logged-in hona chahiye.
- `orderId` user ka hona chahiye.
- Order cancellable state mein hona chahiye (e.g., `order_status` = pending or processing).
- Transaction ensure kare atomicity.

**Response**:
```json
{ "message": "Order cancelled successfully" }
```

#### 5.4 Get Order Details
**Endpoint**: GET /api/orders/:orderId  
**Description**: Order ki complete details return karta hai.  
**Database Interaction**:
- **Orders Table**: Fetch order by `orderId`.
- **OrderItems Table**: Fetch items with `product_id`, `product_variant_id`.
- **Products Table**, **ProductVariants Table**: Product details fetch karo.
- **Addresses Table**: Delivery address fetch karo.
- **Payments Table**: Payment details fetch karo.
- **CouponRedemptions Table**: Applied coupon details fetch karo.

**Validations**:
- User logged-in hona chahiye.
- `orderId` user ka hona chahiye.

**Response**:
```json
{
  "order_id": "o1x2y3",
  "order_number": "ORD-2025-001",
  "order_status": "pending",
  "payment_status": "pending",
  "subtotal": 159998,
  "shipping_cost": 100,
  "tax_amount": 28799.64,
  "discount_amount": 0,
  "total_amount": 188897.64,
  "items": [
    {
      "order_item_id": "oi1x2y3",
      "product_id": "p1x2y3",
      "product_variant_id": "v1x2y3",
      "total_quantity": 2,
      "price_at_time": 79999,
      "final_price": 159998,
      "product": { "name": "iPhone 15" }
    }
  ],
  "address": {
    "address_id": "a1x2y3",
    "address_line1": "123, MG Road",
    "city": "Delhi"
  },
  "payment": {
    "payment_id": "pay1x2y3",
    "amount": 188897.64,
    "payment_status": "pending"
  }
}
```

#### 5.5 List Orders
**Endpoint**: GET /api/orders  
**Description**: User ke sabhi orders list karta hai with pagination.  
**Query Parameters**: `?page=1&limit=10&status=pending`  
**Database Interaction**:
- **Orders Table**: Query orders for `user_id` with filters (`order_status`, date range).
- **OrderItems Table**: Fetch item counts for summary.
- **Addresses Table**, **Payments Table**: Fetch related details.

**Validations**:
- User logged-in hona chahiye.
- Pagination parameters valid hone chahiye.
- `status` agar diya hai to valid enum hona chahiye.

**Response**:
```json
{
  "orders": [
    {
      "order_id": "o1x2y3",
      "order_number": "ORD-2025-001",
      "order_status": "pending",
      "total_amount": 188897.64,
      "order_date": "2025-05-07"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 1
  }
}
```

#### 5.6 List Orders (Admin Only)
**Endpoint**: GET /api/admin/orders  
**Description**: Sabhi orders list karta hai with filters.  
**Query Parameters**: `?page=1&limit=10&status=pending&user_id=u1x2y3`  
**Database Interaction**:
- **Orders Table**: Query all orders with filters (`order_status`, `user_id`, date range).
- **Users Table**, **OrderItems Table**: Fetch user and item details.

**Validations**:
- Admin role required.
- Filters valid hone chahiye.

**Response**:
```json
{
  "orders": [
    {
      "order_id": "o1x2y3",
      "order_number": "ORD-2025-001",
      "user_id": "u1x2y3",
      "order_status": "pending",
      "total_amount": 188897.64
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 50
  }
}
```

---

### 6. Coupon & Discount Management
Coupon aur discount management mein coupons aur discount rules add karne aur order pe apply karne ke features shamil hain.

#### 6.1 Add Coupon (Admin Only)
**Endpoint**: POST /api/admin/coupons  
**Description**: Naya coupon add karta hai.  
**Request Body**:
```json
{
  "code": "DISCOUNT10",
  "description": "10% off on first purchase",
  "type": "percentage",
  "discount_value": 10,
  "min_cart_value": 1000,
  "usage_limit": 100,
  "usage_per_user": 1,
  "valid_from": "2025-01-01",
  "valid_to": "2025-12-31",
  "target_role": "customer",
  "target_type": "cart",
  "is_active": true
}
```

**Database Interaction**:
- **Coupons Table**: Naya record create.
  - `id`: UUID (e.g., "cp1x2y3")
  - `code`: "DISCOUNT10" (unique check)
  - `description`: "10% off on first purchase"
  - `type`: "percentage" (enum: percentage, fixed)
  - `discount_value`: 10
  - `min_cart_value`: 1000
  - `usage_limit`: 100
  - `usage_per_user`: 1
  - `valid_from`: "2025-01-01"
  - `valid_to`: "2025-12-31"
  - `target_role`: "customer" (enum: customer, retailer, both)
  - `target_type`: "cart" (enum: product, cart)
  - `is_active`: true
  - `created_by`: UUID (admin user_id, from JWT)
  - `created_at`, `updated_at`: Auto-managed

**Validations**:
- Admin role required.
- `code` unique hona chahiye.
- `type`, `target_role`, `target_type` valid enums hone chahiye.
- `valid_from` < `valid_to` hona chahiye.
- `discount_value` positive hona chahiye.
- `usage_limit` aur `usage_per_user` positive integers hone chahiye.

**Response**:
```json
{
  "message": "Coupon added successfully",
  "coupon_id": "cp1x2y3"
}
```

#### 6.2 Update Coupon (Admin Only)
**Endpoint**: PUT /api/admin/coupons/:couponId  
**Description**: Coupon details update karta hai.  
**Request Body**:
```json
{
  "code": "DISCOUNT10",
  "is_active": true,
  "discount_value": 15
}
```

**Database Interaction**:
- **Coupons Table**: Record update with `id`.

**Validations**:
- Admin role required.
- `couponId` valid hona chahiye.
- `code` unique hona chahiye.
- Updated fields valid hone chahiye.

**Response**:
```json
{ "message": "Coupon updated successfully" }
```

#### 6.3 Delete Coupon (Admin Only)
**Endpoint**: DELETE /api/admin/coupons/:couponId  
**Description**: Coupon soft delete karta hai (`is_active` = false).  
**Database Interaction**:
- **Coupons Table**: `is_active` = false.

**Validations**:
- Admin role required.
- `couponId` valid hona chahiye.
- No active orders using this coupon hone chahiye.

**Response**:
```json
{ "message": "Coupon deleted successfully" }
```

#### 6.4 Apply Coupon to Order
**Endpoint**: POST /api/orders/apply-coupon  
**Description**: Coupon ko cart ya order pe apply karta hai before order placement.  
**Request Body**:
```json
{
  "coupon_code": "DISCOUNT10"
}
```

**Database Interaction**:
- **Coupons Table**: Coupon validate karo:
  - `code` exists aur `is_active` = true.
  - `valid_from` <= current date <= `valid_to`.
  - `usage_limit` not exceeded (count `CouponRedemptions`).
  - `target_role` matches user role.
  - `target_type` = "cart" ya specific product.
- **CouponUsers Table**: Check if coupon restricted to specific users.
  - `id`: UUID (e.g., "cu1x2y3")
  - `coupon_id`: "cp1x2y3" (FK → Coupons)
  - `user_id`: "u1x2y3" (FK → Users)
  - `created_at`, `updated_at`: Auto-managed
- **CouponRedemptions Table**: Check `usage_per_user` limit for `user_id`.
- **CartItems Table**: Calculate discount:
  - If `type` = "percentage", apply `discount_value`% on `final_price`.
  - If `type` = "fixed", subtract `discount_value`.
  - Update `discount_applied` and `final_price` for eligible items.
- **Carts Table**: Recalculate cart total.

**Validations**:
- User logged-in hona chahiye.
- `coupon_code` valid hona chahiye.
- Cart non-empty hona chahiye.
- Cart total `min_cart_value` se zyada hona chahiye.
- Coupon user-specific hai to `CouponUsers` mein `user_id` hona chahiye.
- `usage_per_user` limit exceed nahi hona chahiye.

**Response**:
```json
{
  "message": "Coupon applied successfully",
  "discount_amount": 15999.8,
  "updated_cart": {
    "cart_id": "c1x2y3",
    "items": [
      {
        "cart_item_id": "ci1x2y3",
        "quantity": 2,
        "price_at_time": 79999,
        "final_price": 143998.2,
        "discount_applied": 15999.8,
        "product": { "name": "iPhone 15" }
      }
    ],
    "total_amount": 143998.2
  }
}
```

---

### 7. Product Reviews & Ratings
Product reviews aur ratings management mein reviews add, update, delete, aur admin review management ke features shamil hain.

#### 7.1 Add Review
**Endpoint**: POST /api/products/:productId/reviews  
**Description**: Product review add karta hai.  
**Request Body**:
```json
{
  "rating": 4,
  "comment": "Great product!",
  "title": "Love it!"
}
```

**Database Interaction**:
- **Reviews Table**: Naya record create.
  - `product_review_id`: UUID (e.g., "pr1x2y3")
  - `product_id`: "p1x2y3" (FK → Products)
  - `user_id`: "u1x2y3" (FK → Users, from JWT)
  - `rating`: 4
  - `title`: "Love it!"
  - `review`: "Great product!"
  - `is_verified_purchase`: true (check via `Orders`)
  - `is_approved`: false (for admin moderation)
  - `created_by`: "u1x2y3" (from JWT)
  - `created_at`, `updated_at`: Auto-managed by Sequelize

**Validations**:
- User logged-in hona chahiye.
- `productId` valid product hai.
- `rating` 1 se 5 tak hona chahiye.
- `comment` aur `title` atleast ek hi hona chahiye.

**Response**:
```json
{ "message": "Review added successfully" }
```

#### 7.2 Get Reviews
**Endpoint**: GET /api/products/:productId/reviews  
**Description**: Product ki sabhi reviews list karta hai.  
**Database Interaction**:
- **Reviews Table**: Query reviews for `product_id`.
- **Users Table**: Fetch user details for each review.

**Validations**:
- `productId` valid product hai.

**Response**:
```json
{
  "reviews": [
    {
      "review_id": "pr1x2y3",
      "rating": 4,
      "title": "Love it!",
      "review": "Great product!",
      "is_verified_purchase": true,
      "is_approved": false,
      "user": { "name": "John Doe" }
    }
  ]
}
```

#### 7.3 Update Review (Admin Only)
**Endpoint**: PUT /api/admin/products/:productId/reviews/:reviewId  
**Description**: Admin review update karta hai.  
**Request Body**:
```json
{
  "rating": 5,
  "comment": "Excellent product!",
  "title": "Love it!"
}
```

**Database Interaction**:
- **Reviews Table**: Update review with `review_id`.
  - `rating`: 5
  - `title`: "Love it!"
  - `review`: "Excellent product!"
  - `updated_by`: "u1x2y3" (from JWT)
  - `updated_at`: Auto-managed by Sequelize

**Validations**:
- Admin role required.
- `reviewId` valid review hai.

**Response**:
```json
{ "message": "Review updated successfully" }
```

#### 7.4 Delete Review (Admin Only)
**Endpoint**: DELETE /api/admin/products/:productId/reviews/:reviewId  
**Description**: Admin review delete karta hai.  
**Database Interaction**:
- **Reviews Table**: Soft delete review with `review_id` (`is_approved` = false).

**Validations**:
- Admin role required.
- `reviewId` valid review hai.

**Response**:
```json
{ "message": "Review deleted successfully" }
```

--- 

